{"version":3,"sources":["webpack:///./src/views/transfer/contract.vue?042b","webpack:///src/views/transfer/contract.vue","webpack:///./src/views/transfer/contract.vue?52b4","webpack:///./src/views/transfer/contract.vue","webpack:///./src/views/transfer/contract.vue?7c0f","webpack:///./node_modules/bignumber.js/bignumber.js"],"names":["render","_vm","this","_h","$createElement","_c","_self","attrs","title","left-text","left-arrow","on","click-left","onClickLeft","staticClass","_v","startWitnSingle","originAddress","click","handleDeleteAll","type","placeholder","maxlength","blur","e","handleTextareaBlur","originAmount","handleDeleteAllAmount","infoData","length","_s","contractData","symbol","_l","item","index","currentActive","key","$event","address","amount","model","value","callback","$$v","$set","expression","_e","handleAddSingle","_m","total_amount","handleTransfer","position","popShow","name","gas","class","gas-selected","gasPrice","disabled","domProps","change","handleGasChange","tip","directives","rawName","handleAmountChange","input","target","composing","gasLimit","ethAmount","price","handleNextClick","staticRenderFns","bignumber","set","DECIMAL_PLACES","contractvue_type_script_lang_js_","data","addressInput","amountInput","singleAddress","singleAmount","addDataSingle","numberShow","gasConfig","ethPrice","MethodID","CommonParams","Decimals","delegate","content","computed","total","arr","forEach","watch","val","_this","newArr","split","_this2","newGaslimit","newGasPrice","times","div","Math","pow","toString","newPrice","newAmount","toFixed","mounted","_this3","Object","utils","initPossiableFunc","api","then","res","code","map","contracts","methods","push","single","setTimeout","document","querySelector","focus","examineData","str","that","valid_status","message","hasOwnProperty","$web3","isHex","isAddress","NaN","dis_qualified","formatString264","contract","replace","addressStr","amountStr","newStr","i","$dialog","alert","console","log","$router","back","newgasPrice","tx","nonce","to","window","Ygritte","sendTransaction","MTsendTransaction","transfer_contractvue_type_script_lang_js_","component","componentNormalizer","options","__file","__webpack_exports__","_node_modules_mini_css_extract_plugin_dist_loader_js_node_modules_css_loader_index_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_lib_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_lib_loader_js_ref_8_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_contract_vue_vue_type_style_index_0_id_3c77ec74_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0___default","__WEBPACK_AMD_DEFINE_RESULT__","globalObject","BigNumber","isNumeric","mathceil","ceil","mathfloor","floor","bignumberError","tooManyDigits","BASE","LOG_BASE","MAX_SAFE_INTEGER","POWS_TEN","SQRT_BASE","MAX","clone","configObject","convertBase","parseNumeric","P","prototype","constructor","valueOf","ONE","ROUNDING_MODE","TO_EXP_NEG","TO_EXP_POS","MIN_EXP","MAX_EXP","CRYPTO","MODULO_MODE","POW_PRECISION","FORMAT","decimalSeparator","groupSeparator","groupSize","secondaryGroupSize","fractionGroupSeparator","fractionGroupSize","ALPHABET","n","b","alphabet","c","caseChanged","isNum","len","x","s","slice","test","charCodeAt","indexOf","search","substring","intCheck","round","DEBUG","Error","charAt","toUpperCase","toLowerCase","format","rm","id","c0","ne","coeffToString","toExponential","toFixedPoint","maxOrMin","args","method","m","isArray","call","normalise","j","pop","sd","r","d","k","ni","rd","xc","pows10","out","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","config","obj","p","v","crypto","getRandomValues","randomBytes","EXPONENTIAL_AT","RANGE","isBigNumber","_isBigNumber","maximum","max","arguments","lt","minimum","min","gt","random","pow2_53","random53bitInt","dp","a","rand","Uint32Array","copy","splice","decimal","toBaseOut","baseIn","baseOut","arrL","reverse","sign","callerIsToString","y","concat","multiply","base","temp","xlo","xhi","carry","klo","khi","compare","aL","bL","cmp","subtract","more","prod","prodL","q","qc","rem","remL","rem0","xi","xL","yc0","yL","yz","yc","bitFloor","basePrefix","dotAfter","dotBefore","isInfinityOrNaN","whitespaceOrPlus","isNaN","p1","p2","absoluteValue","abs","comparedTo","decimalPlaces","dividedBy","dividedToIntegerBy","idiv","exponentiatedBy","half","isModExp","nIsBig","nIsNeg","nIsOdd","isInteger","isOdd","mod","integerValue","isEqualTo","eq","isFinite","isGreaterThan","isGreaterThanOrEqualTo","gte","isLessThan","isLessThanOrEqualTo","lte","isNegative","isPositive","isZero","minus","t","xLTy","plus","xe","ye","modulo","multipliedBy","xcL","ycL","ylo","yhi","zc","sqrtBase","negated","precision","shiftedBy","squareRoot","sqrt","rep","toFormat","g1","g2","intPart","fractionPart","isNeg","intDigits","substr","RegExp","toFraction","md","d0","d1","d2","exp","n0","n1","toNumber","toPrecision","toJSON","z","l","zs","exports","__webpack_require__","module","undefined"],"mappings":"qHAAA,IAAAA,EAAA,WAA0B,IAAAC,EAAAC,KAAaC,EAAAF,EAAAG,eAA0BC,EAAAJ,EAAAK,MAAAD,IAAAF,EAAwB,OAAAE,EAAA,UAAkBA,EAAA,eAAoBE,OAAOC,MAAA,OAAAC,YAAA,KAAAC,aAAA,IAAgDC,IAAKC,aAAAX,EAAAY,eAA8BR,EAAA,OAAYS,YAAA,qBAA+BT,EAAA,OAAYS,YAAA,uCAAiDb,EAAAc,GAAA,oDAAAV,EAAA,OAAAA,EAAA,OAAiFS,YAAA,iDAA2DT,EAAA,OAAYS,YAAA,4BAAsCb,EAAAe,iBAAAf,EAAAgB,cAAwOZ,EAAA,OAAYM,IAAIO,MAAAjB,EAAAkB,mBAA6BlB,EAAAc,GAAA,UAArRV,EAAA,YAA4DS,YAAA,YAAAP,OAA+Ba,KAAA,WAAAC,YAAA,WAAAC,UAAA,KAA4DX,IAAKY,KAAA,SAAAC,GAAqB,OAAAvB,EAAAwB,mBAAAD,EAAA,uBAAoGnB,EAAA,OAA+BS,YAAA,4BAAsCb,EAAAe,iBAAAf,EAAAyB,aAAsOrB,EAAA,OAAYM,IAAIO,MAAAjB,EAAA0B,yBAAmC1B,EAAAc,GAAA,UAAzRV,EAAA,YAA2DS,YAAA,YAAAP,OAA+Ba,KAAA,WAAAC,YAAA,WAAAC,UAAA,KAA4DX,IAAKY,KAAA,SAAAC,GAAqB,OAAAvB,EAAAwB,mBAAAD,EAAA,0BAAyGvB,EAAA2B,SAAAC,OAAA,EAAAxB,EAAA,OAAAA,EAAA,OAAqES,YAAA,sDAAgET,EAAA,OAAAA,EAAA,OAAAJ,EAAAc,GAAA,QAAAV,EAAA,OAAAJ,EAAAc,GAAA,MAAAd,EAAA6B,GAAA7B,EAAA8B,aAAAC,QAAA,SAAA/B,EAAAgC,GAAAhC,EAAA,kBAAAiC,EAAAC,GAAgJ,OAAAlC,EAAAmC,gBAAAD,EAAA9B,EAAA,OAA+CgC,IAAAF,EAAArB,YAAA,0CAAAH,IAAoEO,MAAA,SAAAoB,GAAyBrC,EAAAmC,cAAAD,MAA4B9B,EAAA,OAAAJ,EAAAc,GAAAd,EAAA6B,GAAAK,EAAA,MAAA9B,EAAA,OAAAJ,EAAAc,GAAAd,EAAA6B,GAAAI,EAAAK,YAAAlC,EAAA,OAAyFS,YAAA,4BAAsCb,EAAAc,GAAAd,EAAA6B,GAAAI,EAAAM,aAAAnC,EAAA,OAA4CS,YAAA,4CAAsDT,EAAA,OAAAJ,EAAAc,GAAAd,EAAA6B,GAAAK,EAAA,MAAA9B,EAAA,aAAsDS,YAAA,iBAAAH,IAAiCY,KAAA,SAAAe,GAAwBrC,EAAAmC,cAAA,OAAyBK,OAAQC,MAAAR,EAAA,QAAAS,SAAA,SAAAC,GAA8C3C,EAAA4C,KAAAX,EAAA,UAAAU,IAA+BE,WAAA,kBAA4BzC,EAAA,aAAkBE,OAAOa,KAAA,UAAgBT,IAAKY,KAAA,SAAAe,GAAwBrC,EAAAmC,cAAA,OAAyBK,OAAQC,MAAAR,EAAA,OAAAS,SAAA,SAAAC,GAA6C3C,EAAA4C,KAAAX,EAAA,SAAAU,IAA8BE,WAAA,kBAA2B,MAAM,GAAA7C,EAAA8C,KAAA1C,EAAA,OAAyBS,YAAA,0EAAoFT,EAAA,OAAYS,YAAA,kCAAAH,IAAkDO,MAAAjB,EAAA+C,mBAA6B3C,EAAA,QAAaS,YAAA,cAAwBb,EAAAc,GAAA,OAAAd,EAAAc,GAAA,qBAAAd,EAAAgD,GAAA,KAAA5C,EAAA,OAAkES,YAAA,eAAyBT,EAAA,OAAYS,YAAA,MAAgBT,EAAA,QAAAJ,EAAAc,GAAA,UAAAV,EAAA,QAAAJ,EAAAc,GAAA,aAAAd,EAAA6B,GAAA7B,EAAA2B,SAAAC,QAAA,eAAAxB,EAAA,QAAAJ,EAAAc,GAAA,YAAAd,EAAA6B,GAAA7B,EAAA8B,aAAAC,QAAA,QAAA/B,EAAA6B,GAAA7B,EAAAiD,cAAA,iBAAA7C,EAAA,OAAkOM,IAAIO,MAAAjB,EAAAkD,kBAA4BlD,EAAAc,GAAA,wBAAAV,EAAA,aAAiDE,OAAO6C,SAAA,UAAoBX,OAAQC,MAAAzC,EAAA,QAAA0C,SAAA,SAAAC,GAA6C3C,EAAAoD,QAAAT,GAAgBE,WAAA,aAAuBzC,EAAA,OAAYS,YAAA,gBAA0BT,EAAA,MAAWS,YAAA,gGAA0GT,EAAA,YAAiBE,OAAO+C,KAAA,SAAe3C,IAAKO,MAAA,SAAAoB,GAAyBrC,EAAAoD,SAAApD,EAAAoD,YAA6BhD,EAAA,QAAAJ,EAAAc,GAAA,UAAAV,EAAA,YAAAA,EAAA,OAAuDS,YAAA,aAAuBT,EAAA,MAAAJ,EAAAc,GAAA,8BAAAV,EAAA,MAAAJ,EAAAgC,GAAAhC,EAAA,mBAAAsD,EAAApB,GAAoG,OAAA9B,EAAA,OAAiBgC,IAAAF,EAAAqB,OAC16GC,eAAAxD,EAAAyD,WAAAH,EAAAf,QACa7B,IAAKO,MAAA,SAAAoB,GAAyBrC,EAAAyD,SAAAH,EAAAf,WAA4BnC,EAAA,SAAcE,OAAOoD,SAAAJ,EAAAI,UAAwBC,UAAWlB,MAAAa,EAAAf,OAAAe,EAAAf,OAAA,WAAwC7B,IAAKkD,OAAA5D,EAAA6D,mBAA8BzD,EAAA,KAAAJ,EAAAc,GAAAd,EAAA6B,GAAAyB,EAAAQ,eAAsC1D,EAAA,OAAeS,YAAA,mCAA6CT,EAAA,MAAAJ,EAAAc,GAAA,qBAAAV,EAAA,QAAkDS,YAAA,+BAAyCb,EAAAc,GAAA,4BAAAV,EAAA,OAAAA,EAAA,OAAyDS,YAAA,0BAAoCT,EAAA,SAAc2D,aAAaV,KAAA,QAAAW,QAAA,UAAAvB,MAAAzC,EAAA,SAAA6C,WAAA,aAA0Ec,UAAYlB,MAAAzC,EAAA,UAAuBU,IAAKkD,OAAA5D,EAAAiE,mBAAAC,MAAA,SAAA7B,GAAyDA,EAAA8B,OAAAC,YAAsCpE,EAAAqE,SAAAhC,EAAA8B,OAAA1B,iBAAmCrC,EAAA,OAAkBS,YAAA,eAAyBT,EAAA,KAAAJ,EAAAc,GAAA,eAAAd,EAAA6B,GAAA7B,EAAAsE,WAAA,WAAAtE,EAAA6B,GAAA7B,EAAAuE,OAAA,gBAAAnE,EAAA,KAA2GS,YAAA,+BAAyCb,EAAAc,GAAA,oBAAAd,EAAA6B,GAAA7B,EAAAqE,UAAA,eAAArE,EAAA6B,GAAA7B,EAAAyD,UAAA,wBAAArD,EAAA,cAA+HS,YAAA,cAAAH,IAA8BO,MAAAjB,EAAAwE,mBAA6BxE,EAAAc,GAAA,sCAC5mC2D,GAAA,WAAoC,IAAAzE,EAAAC,KAAaC,EAAAF,EAAAG,eAA0BC,EAAAJ,EAAAK,MAAAD,IAAAF,EAAwB,OAAAE,EAAA,OAAiBS,YAAA,uBAAiCT,EAAA,MAAAJ,EAAAc,GAAA,2CAAAV,EAAA,MAAAA,EAAA,MAAAJ,EAAAc,GAAA,+CAAAV,EAAA,MAAAJ,EAAAc,GAAA,sDAAAV,EAAA,MAAAJ,EAAAc,GAAA,mDAAAV,EAAA,MAAAJ,EAAAc,GAAA,sDAAAV,EAAA,MAAAJ,EAAAc,GAAA,mKC0JrJ4D,EAAA,aAAAC,KAAAC,eAAA,KACA,IAAAC,GACAxB,KAAA,WACAyB,KAFA,WAGA,OACA9D,cAAA,GACAS,aAAA,GACAsD,cAAA,EACAC,aAAA,EACAC,cAAA,GACAC,aAAA,GACAC,eAAA,EACA/B,SAAA,EAEAjB,cAAA,KACAiD,YAAA,EAIAzD,YACAZ,iBAAA,EAEAsE,YAEA9C,OAAA,EACAuB,IAAA,IACAJ,UAAA,EACAtB,IAAA,QAGAG,OAAA,GACAuB,IAAA,KACAJ,UAAA,EACAtB,IAAA,QAGAG,OAAA,GACAuB,IAAA,IACAJ,UAAA,EACAtB,IAAA,QAGAG,OAAA,KACAuB,IAAA,MACAJ,UAAA,IAGAD,SAAA,EACAY,SAAA,EACAC,UAAA,EACAgB,SAAA,EACAf,MAAA,EAGAgB,SAAA,aACAzD,gBACA0D,aACA,mEACAC,SAAA,KACAC,SAAA,6CAGAC,QAAA,KAGAC,UAOA3C,aAPA,WAQA,IAAA4C,EAAA,EACAC,EAAA7F,KAAA0B,SAIA,OAHAmE,EAAAC,QAAA,SAAA9D,GACA4D,GAAA,EAAA5D,EAAAM,SAEAsD,IAoCAG,OAEAhF,cAFA,SAEAiF,GAAA,IAAAC,EAAAjG,KAEA,QAAAgG,EAAA,CAIA,IAAAE,EAAA,KAAAF,OAAAG,MAAA,MACAD,EAAAJ,QAAA,SAAA9D,EAAAC,GACAgE,EAAAvE,SAAAO,GAAAgE,EAAAvE,SAAAO,GAAAI,QAAAL,EAAAiE,EAAAvE,SAAAO,IAAAI,QAAAL,UALAhC,KAAA0B,aAQAF,aAbA,SAaAwE,GAAA,IAAAI,EAAApG,KAEA,QAAAgG,EAAA,CAMA,IAAAE,EAAA,KAAAF,OAAAG,MAAA,MACAD,EAAAJ,QAAA,SAAA9D,EAAAC,GACAmE,EAAA1E,SAAAO,GAAAmE,EAAA1E,SAAAO,GAAAK,OAAAN,EAAAoE,EAAA1E,SAAAO,IAAAK,OAAAN,UAPAhC,KAAA0B,SAAAoE,QAAA,SAAA9D,EAAAC,UACAD,EAAAM,UAWA8B,SA5BA,SA4BA4B,GACA,IAAAK,EAAA,IAAA5B,EAAA,aAAAuB,GACAM,EAAA,IAAA7B,EAAA,aAAAzE,KAAAwD,UACAxD,KAAAqE,UAAAiC,EACAC,MAAAF,GACAG,IAFAC,KAAAC,IAEA,OACAC,YAEAnD,SApCA,SAoCAwC,GACA,IAAAM,EAAA,IAAA7B,EAAA,aAAAuB,GACAK,EAAA,IAAA5B,EAAA,aAAAzE,KAAAoE,UACApE,KAAAqE,UAAAiC,EACAC,MAAAF,GACAG,IAFAC,KAAAC,IAEA,OACAC,YAEAjF,SA5CA,SA4CAsE,GACAhG,KAAAoE,SAAA,IAAA4B,EAAArE,QAEA0D,SA/CA,SA+CAW,GACA,IAAAY,EAAA,IAAAnC,EAAA,aAAAuB,GACAa,EAAA,IAAApC,EAAA,aAAAzE,KAAAqE,WACArE,KAAAsE,MAAAsC,EAAAL,MAAAM,GAAAF,YAEAtC,UApDA,SAoDA2B,GACA,IAAAY,EAAA,IAAAnC,EAAA,aAAAzE,KAAAqF,UACAwB,EAAA,IAAApC,EAAA,aAAAuB,GACAhG,KAAAsE,MAAAsC,EACAL,MAAAM,GACAC,QAAA,GACAH,aAGAI,QA9KA,WA8KA,IAAAC,EAAAhH,KACAA,KAAA6B,aAAAoF,OAAAC,EAAA,KAAAD,CAAA,gBACAjH,KAAAmH,oBACAF,OAAAG,EAAA,KAAAH,GAAAI,KAAA,SAAAC,GACA,IAAAzC,EAAAyC,EAAAzC,KACA,IAAAA,EAAA0C,OACAP,EAAA5B,UAAA4B,EAAA5B,UAAAoC,IAAA,SAAAxF,EAAAC,GACA,GAAAD,EAAAG,IAAA,CACA,IAAAG,EAAA,IAAAmC,EAAA,aAAAI,OAAA7C,EAAAG,MACAH,EAAAM,SAAAkE,IAAAC,KAAAC,IAAA,OAAAC,WACA,IAAA1E,IACA+E,EAAAxD,SAAAxB,EAAAM,QAGA,OAAAN,OAIAiF,OAAAG,EAAA,KAAAH,EACAQ,UAAA,QACAJ,KAAA,SAAAC,GACAN,EAAA3B,SAAAiC,EAAAzC,UAAA,GAAAP,SAGAoD,SACAnG,mBADA,SACAD,EAAAa,GACAnC,KAAAmC,GAAAb,EAAA4C,OAAA1B,OAEAM,gBAJA,WAKA,IAAA9C,KAAA0B,SAAAC,SACA3B,KAAAc,iBAAA,GAEAd,KAAA0B,SAAAiG,MACAC,QAAA,EACAvF,QAAA,GACAC,OAAA,OAEAtC,KAAAkC,cAAAlC,KAAA0B,SAAAC,OAAA,EACAkG,WAAA,WACAC,SAAAC,cAAA,yBAAAC,SACA,MAEA/G,gBAlBA,WAmBAjB,KAAAe,cAAA,GACAf,KAAAwB,aAAA,GACAxB,KAAA0B,YACA1B,KAAAc,iBAAA,GAEAW,sBAxBA,WAyBAzB,KAAA0B,SAAAoE,QAAA,SAAA9D,GACAA,EAAAM,OAAA,QAGA2F,YA7BA,WA8BA,IAAAC,EAAA,GACAC,EAAAnI,KACA0B,EAAA1B,KAAA0B,SACA0G,GAAA,EAEA,MAAA1G,EAAAC,OAEA,OADAyG,GAAA,GAEAA,eACAC,QAAA,qBAwBA,GApBA3G,EAAAoE,QAAA,SAAA9D,EAAAC,GAEA,OAAAD,EAAAsG,eAAA,YAAAtG,EAAAsG,eAAA,WAOAH,EAAAI,MAAArB,MAAAsB,MAAAxG,EAAAK,UAAA8F,EAAAI,MAAArB,MAAAuB,UAAAzG,EAAAK,SAKA,EAAAL,EAAAM,SAAAoG,KACA1G,EAAA2G,eAAA,OACAP,GAAA,SAFA,GAXApG,EAAA2G,eAAA,OACAP,GAAA,OAgBAA,EACA,OACAA,eACAC,QAAA,mBAIAH,GACAC,EAAA7C,SACA6C,EAAAS,gBAAAT,EAAAtG,aAAAgH,SAAAC,QAAA,UACAX,EAAA5C,aACA,IAAAgC,GAAA,IAAA7F,EAAAC,OAAA,IAAAgF,SAAA,IACAuB,GACAC,EAAAS,gBAAArB,GACAY,EAAAS,gBAAAlH,EAAAC,OAAAgF,SAAA,KAEA,IAAAoC,EAAA,GAAAC,EAAA,GAWA,OAVAtH,EAAAoE,QAAA,SAAA9D,GAEA,IAAAK,EAAAL,EAAAK,QAAAyG,QAAA,SACAC,GAAAZ,EAAAS,gBAAAvG,GAEA,IAAAC,EAAA,IAAAmC,EAAA,aAAAzC,EAAAM,QACAA,IAAAiE,MAAAE,KAAAC,IAAA,GAAAyB,EAAA3C,WAAAmB,SAAA,IACAqC,GAAAb,EAAAS,gBAAAtG,KAEA4F,GAAAa,EAAA/I,KAAA4I,gBAAAlH,EAAAC,OAAAgF,SAAA,KAAAqC,GAEAZ,eACAvD,KAAAqD,IAIAU,gBAhGA,SAgGAV,GACA,IAAAA,EACA,mBAEA,IAAAe,EAAAf,EAAAvB,WACA,OAAAsC,EAAAtH,OACA,OAAAsH,EACA,GAAAA,EAAAtH,OAAA,IAEA,IADA,IAAAA,EAAAsH,EAAAtH,OACAuH,EAAA,EAAAA,EAAA,GAAAvH,EAAAuH,IACAD,EAAA,IAAAA,EAEA,OAAAA,EAEA,OAAAA,GAGAhG,eAjHA,WAkHA,IAAAqE,EAAAtH,KAAAiI,cACAX,EAAAc,cAKApI,KAAA0F,QAAA4B,EAAAzC,KACA7E,KAAAmD,SAAA,GALAnD,KAAAmJ,QAAAC,OACAf,QAAAf,EAAAe,WAOAzE,gBA5HA,SA4HAtC,GACAtB,KAAAoF,UAAA,GAAA9C,OAAA,EAAAhB,EAAA4C,OAAA1B,MACAxC,KAAAwD,SAAA,EAAAlC,EAAA4C,OAAA1B,OAEAwB,mBAhIA,WAiIAhE,KAAAoE,SAAA,EAAA9C,EAAA4C,OAAA1B,OAGA7B,YApIA,WAqIA0I,QAAAC,IAAA,kBACAtJ,KAAAuJ,QAAAC,QAEAjF,gBAxIA,WAyIA,IAAAkF,EAAA,IAAAhF,EAAA,aAAAzE,KAAAwD,UACAiG,IAAAlD,MAAAE,KAAAC,IAAA,OAAAC,WACA,IAAA+C,GACAC,MAAA,EACAnG,SAAAiG,EACArF,SAAApE,KAAAoE,SACAwF,GAAA5J,KAAAyF,SACAjD,MAAA,EACAqC,KAAA7E,KAAA0F,SAEA2D,QAAAC,IAAAI,GACAG,OAAAC,SAAAD,OAAAC,QAAAC,gBAAAL,EAAA,sBAEAvC,kBAtJA,WAuJA,IAAAgB,EAAAnI,KACA6J,OAAAG,kBAAA,SAAA1C,GACA+B,QAAAC,IAAAhC,EAAA,qBACAa,EAAAoB,QAAAC,WC9fwRS,EAAA,0BCQxRC,EAAAjD,OAAAkD,EAAA,KAAAlD,CACAgD,EACAnK,EACA0E,GACA,EACA,KACA,WACA,MAIA0F,EAAAE,QAAAC,OAAA,eACAC,EAAA,WAAAJ,wECpBuhBK,EAAA,0BCAvhB,IAAAC,GAAC,SAAAC,GACD,aAkDA,IAAAC,EACAC,EAAA,6CAEAC,EAAAnE,KAAAoE,KACAC,EAAArE,KAAAsE,MAEAC,EAAA,qBACAC,EAAAD,EAAA,yDAEAE,EAAA,KACAC,EAAA,GACAC,EAAA,iBAEAC,GAAA,0DACAC,EAAA,IAKAC,EAAA,IAMA,SAAAC,EAAAC,GACA,IAAAjF,EAAAkF,EAAAC,EACAC,EAAAlB,EAAAmB,WAAiCC,YAAApB,EAAA/D,SAAA,KAAAoF,QAAA,MACjCC,EAAA,IAAAtB,EAAA,GAUA/F,EAAA,GAaAsH,EAAA,EAMAC,GAAA,EAIAC,EAAA,GAMAC,GAAA,IAKAC,EAAA,IAGAC,GAAA,EAkBAC,EAAA,EAIAC,EAAA,EAGAC,GACAC,iBAAA,IACAC,eAAA,IACAC,UAAA,EACAC,mBAAA,EACAC,uBAAA,IACAC,kBAAA,GAMAC,EAAA,uCAgBA,SAAAtC,EAAAuC,EAAAC,GACA,IAAAC,EAAAC,EAAAC,EAAA/L,EAAA4H,EAAAoE,EAAAC,EAAArF,EACAsF,EAAAxN,KAGA,KAAAwN,aAAA9C,GAKA,WAAAA,EAAAuC,EAAAC,GAGA,SAAAA,EAAA,CAGA,GAAAD,aAAAvC,EAIA,OAHA8C,EAAAC,EAAAR,EAAAQ,EACAD,EAAAlM,EAAA2L,EAAA3L,OACAkM,EAAAJ,GAAAH,IAAAG,GAAAH,EAAAS,QAAAT,GAMA,GAFAK,EAAA,iBAAAL,EAEAK,GAAA,EAAAL,GAAA,GAMA,GAHAO,EAAAC,EAAA,EAAAR,EAAA,GAAAA,MAAA,KAGAA,QAAA,CACA,IAAA3L,EAAA,EAAA4H,EAAA+D,EAA8B/D,GAAA,GAASA,GAAA,GAAA5H,KAGvC,OAFAkM,EAAAlM,SACAkM,EAAAJ,GAAAH,IAIA/E,EAAA+E,EAAA,OACS,CACT,IAAAtC,EAAAgD,KAAAzF,EAAA+E,EAAA,WAAAtB,EAAA6B,EAAAtF,EAAAoF,GACAE,EAAAC,EAAA,IAAAvF,EAAA0F,WAAA,IAAA1F,IAAAwF,MAAA,UAIApM,EAAA4G,EAAA2F,QAAA,WAAA3F,IAAAY,QAAA,UAGAI,EAAAhB,EAAA4F,OAAA,UAGAxM,EAAA,IAAAA,EAAA4H,GACA5H,IAAA4G,EAAAwF,MAAAxE,EAAA,GACAhB,IAAA6F,UAAA,EAAA7E,IACS5H,EAAA,IAGTA,EAAA4G,EAAAvG,YAGO,CAQP,GALAqM,EAAAd,EAAA,EAAAF,EAAArL,OAAA,QACAuG,EAAA+E,EAAA,GAIA,IAAAC,EAEA,OADAM,EAAA,IAAA9C,EAAAuC,aAAAvC,EAAAuC,EAAA/E,GACA+F,EAAAT,EAAA7I,EAAA6I,EAAAlM,EAAA,EAAA2K,GAKA,GAFAqB,EAAA,iBAAAL,EAEAK,EAAA,CAGA,KAAAL,GAAA,SAAAtB,EAAA6B,EAAAtF,EAAAoF,EAAAJ,GAKA,GAHAM,EAAAC,EAAA,EAAAR,EAAA,GAAA/E,IAAAwF,MAAA,SAGAhD,EAAAwD,OAAAhG,EAAAY,QAAA,gBAAAnH,OAAA,GACA,MAAAwM,MACAlD,EAAAgC,GAIAK,GAAA,OAEAE,EAAAC,EAAA,KAAAvF,EAAA0F,WAAA,IAAA1F,IAAAwF,MAAA,SAQA,IALAP,EAAAH,EAAAU,MAAA,EAAAR,GACA5L,EAAA4H,EAAA,EAIAqE,EAAArF,EAAAvG,OAA8BuH,EAAAqE,EAASrE,IACvC,GAAAiE,EAAAU,QAAAT,EAAAlF,EAAAkG,OAAAlF,IAAA,GACA,QAAAkE,GAGA,GAAAlE,EAAA5H,EAAA,CACAA,EAAAiM,EACA,eAEa,IAAAF,IAGbnF,KAAAmG,gBAAAnG,IAAAoG,gBACApG,KAAAoG,gBAAApG,IAAAmG,gBAAA,CACAhB,GAAA,EACAnE,GAAA,EACA5H,EAAA,EACA,SAIA,OAAAqK,EAAA6B,EAAAP,EAAA,GAAAK,EAAAJ,GAIAhF,EAAAwD,EAAAxD,EAAAgF,EAAA,GAAAM,EAAAC,IAGAnM,EAAA4G,EAAA2F,QAAA,SAAA3F,IAAAY,QAAA,QACAxH,EAAA4G,EAAAvG,OAIA,IAAAuH,EAAA,EAAiB,KAAAhB,EAAA0F,WAAA1E,GAA0BA,KAG3C,IAAAqE,EAAArF,EAAAvG,OAA4B,KAAAuG,EAAA0F,aAAAL,KAI5B,GAFArF,IAAAwF,MAAAxE,IAAAqE,GAEArF,EAAA,CAIA,GAHAqF,GAAArE,EAGAoE,GAAA5C,EAAAwD,OACAX,EAAA,KAAAN,EAAA7B,GAAA6B,IAAAnC,EAAAmC,IACA,MAAAkB,MACAlD,EAAAuC,EAAAC,EAAAR,GAMA,GAHA3L,IAAA4H,EAAA,EAGA5H,EAAA+K,EAGAmB,EAAAJ,EAAAI,EAAAlM,EAAA,UAGS,GAAAA,EAAA8K,EAGToB,EAAAJ,GAAAI,EAAAlM,EAAA,OACS,CAWT,GAVAkM,EAAAlM,IACAkM,EAAAJ,KAMAlE,GAAA5H,EAAA,GAAA6J,EACA7J,EAAA,IAAA4H,GAAAiC,GAEAjC,EAAAqE,EAAA,CAGA,IAFArE,GAAAsE,EAAAJ,EAAAzF,MAAAO,EAAAwF,MAAA,EAAAxE,IAEAqE,GAAApC,EAAiCjC,EAAAqE,GACjCC,EAAAJ,EAAAzF,MAAAO,EAAAwF,MAAAxE,KAAAiC,IAGAjD,IAAAwF,MAAAxE,GACAA,EAAAiC,EAAAjD,EAAAvG,YAEAuH,GAAAqE,EAGA,KAAgBrE,IAAKhB,GAAA,KACrBsF,EAAAJ,EAAAzF,MAAAO,SAKAsF,EAAAJ,GAAAI,EAAAlM,EAAA,GA8xBA,SAAAiN,EAAAtB,EAAA/D,EAAAsF,EAAAC,GACA,IAAAC,EAAApN,EAAAqN,EAAApB,EAAArF,EAKA,GAHA,MAAAsG,IAAAvC,EACA+B,EAAAQ,EAAA,MAEAvB,EAAAG,EAAA,OAAAH,EAAAtG,WAKA,GAHA+H,EAAAzB,EAAAG,EAAA,GACAuB,EAAA1B,EAAA3L,EAEA,MAAA4H,EACAhB,EAAA0G,EAAA3B,EAAAG,GACAlF,EAAA,GAAAuG,GAAA,GAAAA,GAAAE,GAAAzC,EACA2C,EAAA3G,EAAAyG,GACAG,EAAA5G,EAAAyG,EAAA,UAeA,GAbA1B,EAAAgB,EAAA,IAAAvD,EAAAuC,GAAA/D,EAAAsF,GAGAlN,EAAA2L,EAAA3L,EAEA4G,EAAA0G,EAAA3B,EAAAG,GACAG,EAAArF,EAAAvG,OAOA,GAAA8M,GAAA,GAAAA,IAAAvF,GAAA5H,MAAA4K,GAAA,CAGA,KAAgBqB,EAAArE,EAAShB,GAAA,IAAAqF,KACzBrF,EAAA2G,EAAA3G,EAAA5G,QAQA,GAJA4H,GAAAyF,EACAzG,EAAA4G,EAAA5G,EAAA5G,EAAA,KAGAA,EAAA,EAAAiM,GACA,KAAArE,EAAA,MAAAhB,GAAA,IAAyCgB,IAAKhB,GAAA,WAG9C,GADAgB,GAAA5H,EAAAiM,EACArE,EAAA,EAEA,IADA5H,EAAA,GAAAiM,IAAArF,GAAA,KACoBgB,IAAKhB,GAAA,KAMzB,OAAA+E,EAAAQ,EAAA,GAAAiB,EAAA,IAAAxG,IAKA,SAAA6G,EAAAC,EAAAC,GACA,IAAAC,EAAAjC,EACA/D,EAAA,EAKA,IAHAiG,EAAAH,EAAA,MAAAA,IAAA,IACAE,EAAA,IAAAxE,EAAAsE,EAAA,MAEY9F,EAAA8F,EAAArN,QAAmB,CAI/B,GAHAsL,EAAA,IAAAvC,EAAAsE,EAAA9F,KAGA+D,EAAAQ,EAAA,CACAyB,EAAAjC,EACA,MACSgC,EAAAG,KAAAF,EAAAjC,KACTiC,EAAAjC,GAIA,OAAAiC,EAQA,SAAAG,EAAApC,EAAAG,EAAA9L,GAKA,IAJA,IAAA4H,EAAA,EACAoG,EAAAlC,EAAAzL,QAGYyL,IAAAkC,GAASlC,EAAAmC,OAGrB,IAAAD,EAAAlC,EAAA,GAAoBkC,GAAA,GAASA,GAAA,GAAApG,KAkB7B,OAfA5H,EAAA4H,EAAA5H,EAAA6J,EAAA,GAAAkB,EAGAY,EAAAG,EAAAH,EAAA3L,EAAA,KAGOA,EAAA8K,EAGPa,EAAAG,GAAAH,EAAA3L,EAAA,IAEA2L,EAAA3L,IACA2L,EAAAG,KAGAH,EAyDA,SAAAgB,EAAAT,EAAAgC,EAAAhB,EAAAiB,GACA,IAAAC,EAAAxG,EAAAoG,EAAAK,EAAA1C,EAAA2C,EAAAC,EACAC,EAAAtC,EAAAJ,EACA2C,EAAA1E,EAGA,GAAAyE,EAAA,CAQAE,EAAA,CAGA,IAAAN,EAAA,EAAAC,EAAAG,EAAA,GAAgCH,GAAA,GAASA,GAAA,GAAAD,KAIzC,GAHAxG,EAAAsG,EAAAE,EAGAxG,EAAA,EACAA,GAAAiC,EACAmE,EAAAE,EACAvC,EAAA6C,EAAAF,EAAA,GAGAC,EAAA5C,EAAA8C,EAAAL,EAAAJ,EAAA,aAIA,GAFAM,EAAAhF,GAAA1B,EAAA,GAAAiC,GAEAyE,GAAAE,EAAAnO,OAAA,CAEA,IAAA8N,EASA,MAAAO,EANA,KAAsBF,EAAAnO,QAAAiO,EAAiBE,EAAAnI,KAAA,IACvCsF,EAAA4C,EAAA,EACAH,EAAA,EACAxG,GAAAiC,EACAmE,EAAApG,EAAAiC,EAAA,MAIa,CAIb,IAHA8B,EAAA0C,EAAAG,EAAAF,GAGAF,EAAA,EAAyBC,GAAA,GAASA,GAAA,GAAAD,KAGlCxG,GAAAiC,EAIAmE,EAAApG,EAAAiC,EAAAuE,EAGAG,EAAAP,EAAA,IAAArC,EAAA8C,EAAAL,EAAAJ,EAAA,QAmBA,GAfAG,KAAAD,EAAA,GAKA,MAAAM,EAAAF,EAAA,KAAAN,EAAA,EAAArC,IAAA8C,EAAAL,EAAAJ,EAAA,IAEAG,EAAAjB,EAAA,GACAqB,GAAAJ,KAAA,GAAAjB,OAAAhB,EAAAC,EAAA,QACAoC,EAAA,MAAAA,IAAA,GAAArB,GAAAiB,GAAA,GAAAjB,IAGAtF,EAAA,EAAAoG,EAAA,EAAArC,EAAA8C,EAAAL,EAAAJ,GAAA,EAAAQ,EAAAF,EAAA,UACApB,IAAAhB,EAAAC,EAAA,QAEA+B,EAAA,IAAAM,EAAA,GAiBA,OAhBAA,EAAAnO,OAAA,EAEA8N,GAGAD,GAAAhC,EAAAlM,EAAA,EAGAwO,EAAA,GAAAC,GAAA5E,EAAAqE,EAAArE,MACAqC,EAAAlM,GAAAkO,GAAA,GAIAM,EAAA,GAAAtC,EAAAlM,EAAA,EAGAkM,EAkBA,GAdA,GAAAtE,GACA4G,EAAAnO,OAAAiO,EACAD,EAAA,EACAC,MAEAE,EAAAnO,OAAAiO,EAAA,EACAD,EAAAI,EAAA5E,EAAAjC,GAIA4G,EAAAF,GAAAN,EAAA,EAAAxE,EAAAmC,EAAA8C,EAAAL,EAAAJ,GAAAS,EAAAT,IAAAK,EAAA,GAIAF,EAEA,OAAoB,CAGpB,MAAAG,EAAA,CAGA,IAAA1G,EAAA,EAAAoG,EAAAQ,EAAA,GAAsCR,GAAA,GAASA,GAAA,GAAApG,KAE/C,IADAoG,EAAAQ,EAAA,IAAAH,EACAA,EAAA,EAA2BL,GAAA,GAASA,GAAA,GAAAK,KAGpCzG,GAAAyG,IACAnC,EAAAlM,IACAwO,EAAA,IAAA5E,IAAA4E,EAAA,OAGA,MAGA,GADAA,EAAAF,IAAAD,EACAG,EAAAF,IAAA1E,EAAA,MACA4E,EAAAF,KAAA,EACAD,EAAA,EAMA,IAAAzG,EAAA4G,EAAAnO,OAA6B,IAAAmO,IAAA5G,GAAe4G,EAAAP,QAI5C/B,EAAAlM,EAAA+K,EACAmB,EAAAJ,EAAAI,EAAAlM,EAAA,KAGSkM,EAAAlM,EAAA8K,IACToB,EAAAJ,GAAAI,EAAAlM,EAAA,IAIA,OAAAkM,EA+oCA,OAxuEA9C,EAAAc,QAEAd,EAAAuF,SAAA,EACAvF,EAAAwF,WAAA,EACAxF,EAAAyF,WAAA,EACAzF,EAAA0F,YAAA,EACA1F,EAAA2F,cAAA,EACA3F,EAAA4F,gBAAA,EACA5F,EAAA6F,gBAAA,EACA7F,EAAA8F,gBAAA,EACA9F,EAAA+F,iBAAA,EACA/F,EAAAgG,OAAA,EAmCAhG,EAAAiG,OAAAjG,EAAAhG,IAAA,SAAAkM,GACA,IAAAC,EAAAC,EAEA,SAAAF,EAAA,CAEA,oBAAAA,EA0HA,MAAAzC,MACAnD,EAAA,oBAAA4F,GArFA,GAlCAA,EAAAtI,eAAAuI,EAAA,oBACAC,EAAAF,EAAAC,GACA7C,EAAA8C,EAAA,EAAAvF,EAAAsF,GACAlM,EAAAmM,GAKAF,EAAAtI,eAAAuI,EAAA,mBACAC,EAAAF,EAAAC,GACA7C,EAAA8C,EAAA,IAAAD,GACA5E,EAAA6E,GAOAF,EAAAtI,eAAAuI,EAAA,oBACAC,EAAAF,EAAAC,GACA1B,EAAA2B,IACA9C,EAAA8C,EAAA,IAAAvF,EAAA,EAAAsF,GACA7C,EAAA8C,EAAA,KAAAvF,EAAAsF,GACA3E,EAAA4E,EAAA,GACA3E,EAAA2E,EAAA,KAEA9C,EAAA8C,GAAAvF,IAAAsF,GACA3E,IAAAC,EAAA2E,EAAA,GAAAA,OAOAF,EAAAtI,eAAAuI,EAAA,SAEA,GADAC,EAAAF,EAAAC,GACA1B,EAAA2B,GACA9C,EAAA8C,EAAA,IAAAvF,GAAA,EAAAsF,GACA7C,EAAA8C,EAAA,KAAAvF,EAAAsF,GACAzE,EAAA0E,EAAA,GACAzE,EAAAyE,EAAA,OACa,CAEb,GADA9C,EAAA8C,GAAAvF,IAAAsF,IACAC,EAGA,MAAA3C,MACAnD,EAAA6F,EAAA,oBAAAC,GAHA1E,IAAAC,EAAAyE,EAAA,GAAAA,KAWA,GAAAF,EAAAtI,eAAAuI,EAAA,WAEA,GADAC,EAAAF,EAAAC,GACAC,QAcA,MAAA3C,MACAnD,EAAA6F,EAAA,uBAAAC,GAdA,GAAAA,EAAA,CACA,uBAAAC,kBACAA,OAAAC,kBAAAD,OAAAE,YAIA,MADA3E,GAAAwE,EACA3C,MACAnD,EAAA,sBAJAsB,EAAAwE,OAOAxE,EAAAwE,EA0BA,GAhBAF,EAAAtI,eAAAuI,EAAA,iBACAC,EAAAF,EAAAC,GACA7C,EAAA8C,EAAA,IAAAD,GACAtE,EAAAuE,GAKAF,EAAAtI,eAAAuI,EAAA,mBACAC,EAAAF,EAAAC,GACA7C,EAAA8C,EAAA,EAAAvF,EAAAsF,GACArE,EAAAsE,GAKAF,EAAAtI,eAAAuI,EAAA,WAEA,GADAC,EAAAF,EAAAC,GACA,iBAAAC,EACA,MAAA3C,MACAnD,EAAA6F,EAAA,mBAAAC,GAFArE,EAAAqE,EAOA,GAAAF,EAAAtI,eAAAuI,EAAA,aAIA,GAHAC,EAAAF,EAAAC,GAGA,iBAAAC,GAAA,iBAAAnD,KAAAmD,GAGA,MAAA3C,MACAnD,EAAA6F,EAAA,aAAAC,GAHA9D,EAAA8D,GAeA,OACAnM,iBACAsH,gBACAiF,gBAAAhF,EAAAC,GACAgF,OAAA/E,EAAAC,GACAC,SACAC,cACAC,gBACAC,SACAO,aAUAtC,EAAA0G,YAAA,SAAAN,GACA,OAAAA,aAAApG,GAAAoG,IAAA,IAAAA,EAAAO,eAAA,GASA3G,EAAA4G,QAAA5G,EAAA6G,IAAA,WACA,OAAAxC,EAAAyC,UAAA5F,EAAA6F,KASA/G,EAAAgH,QAAAhH,EAAAiH,IAAA,WACA,OAAA5C,EAAAyC,UAAA5F,EAAAgG,KAcAlH,EAAAmH,OAAA,WACA,IAAAC,EAAA,iBAMAC,EAAAtL,KAAAoL,SAAAC,EAAA,QACA,WAAsB,OAAAhH,EAAArE,KAAAoL,SAAAC,IACtB,WAAsB,2BAAArL,KAAAoL,SAAA,IACtB,QAAApL,KAAAoL,SAAA,IAEA,gBAAAG,GACA,IAAAC,EAAA/E,EAAA5L,EAAAqO,EAAAmB,EACA5H,EAAA,EACAkE,KACA8E,EAAA,IAAAxH,EAAAsB,GAOA,GALA,MAAAgG,IAAArN,EACAqJ,EAAAgE,EAAA,EAAAzG,GAEAoE,EAAA/E,EAAAoH,EAAA7G,GAEAmB,EAGA,GAAAyE,OAAAC,gBAAA,CAIA,IAFAiB,EAAAlB,OAAAC,gBAAA,IAAAmB,YAAAxC,GAAA,IAEkBzG,EAAAyG,GAQlBmB,EAAA,OAAAmB,EAAA/I,IAAA+I,EAAA/I,EAAA,SAMA4H,GAAA,MACA5D,EAAA6D,OAAAC,gBAAA,IAAAmB,YAAA,IACAF,EAAA/I,GAAAgE,EAAA,GACA+E,EAAA/I,EAAA,GAAAgE,EAAA,KAKAE,EAAAzF,KAAAmJ,EAAA,MACA5H,GAAA,GAGAA,EAAAyG,EAAA,MAGW,KAAAoB,OAAAE,YA2BX,MADA3E,GAAA,EACA6B,MACAnD,EAAA,sBAvBA,IAFAiH,EAAAlB,OAAAE,YAAAtB,GAAA,GAEkBzG,EAAAyG,GAMlBmB,EAAA,oBAAAmB,EAAA/I,IAAA,cAAA+I,EAAA/I,EAAA,GACA,WAAA+I,EAAA/I,EAAA,YAAA+I,EAAA/I,EAAA,IACA+I,EAAA/I,EAAA,SAAA+I,EAAA/I,EAAA,OAAA+I,EAAA/I,EAAA,GAEA4H,GAAA,KACAC,OAAAE,YAAA,GAAAmB,KAAAH,EAAA/I,IAIAkE,EAAAzF,KAAAmJ,EAAA,MACA5H,GAAA,GAGAA,EAAAyG,EAAA,EASA,IAAArD,EAEA,KAAgBpD,EAAAyG,GAChBmB,EAAAiB,IACAjB,EAAA,OAAA1D,EAAAlE,KAAA4H,EAAA,MAcA,IAVAnB,EAAAvC,IAAAlE,GACA8I,GAAA7G,EAGAwE,GAAAqC,IACAlB,EAAAzF,EAAAF,EAAA6G,GACA5E,EAAAlE,GAAA4B,EAAA6E,EAAAmB,MAIc,IAAA1D,EAAAlE,GAAYkE,EAAAmC,MAAArG,KAG1B,GAAAA,EAAA,EACAkE,GAAA9L,EAAA,OACS,CAGT,IAAAA,GAAA,EAAuB,IAAA8L,EAAA,GAAYA,EAAAiF,OAAA,KAAA/Q,GAAA6J,GAGnC,IAAAjC,EAAA,EAAA4H,EAAA1D,EAAA,GAA+B0D,GAAA,GAASA,GAAA,GAAA5H,KAGxCA,EAAAiC,IAAA7J,GAAA6J,EAAAjC,GAKA,OAFAgJ,EAAA5Q,IACA4Q,EAAA9E,IACA8E,GAjIA,GA0IAxG,EAAA,WACA,IAAA4G,EAAA,aAOA,SAAAC,EAAArK,EAAAsK,EAAAC,EAAAtF,GAOA,IANA,IAAAmC,EAEAoD,EADA7M,GAAA,GAEAqD,EAAA,EACAqE,EAAArF,EAAAvG,OAEcuH,EAAAqE,GAAS,CACvB,IAAAmF,EAAA7M,EAAAlE,OAAiC+Q,IAAQ7M,EAAA6M,IAAAF,GAIzC,IAFA3M,EAAA,IAAAsH,EAAAU,QAAA3F,EAAAkG,OAAAlF,MAEAoG,EAAA,EAAqBA,EAAAzJ,EAAAlE,OAAgB2N,IAErCzJ,EAAAyJ,GAAAmD,EAAA,IACA,MAAA5M,EAAAyJ,EAAA,KAAAzJ,EAAAyJ,EAAA,MACAzJ,EAAAyJ,EAAA,IAAAzJ,EAAAyJ,GAAAmD,EAAA,EACA5M,EAAAyJ,IAAAmD,GAKA,OAAA5M,EAAA8M,UAMA,gBAAAzK,EAAAsK,EAAAC,EAAAG,EAAAC,GACA,IAAA1F,EAAAuC,EAAApO,EAAAqO,EAAAF,EAAAjC,EAAAsC,EAAAgD,EACA5J,EAAAhB,EAAA2F,QAAA,KACAmE,EAAArN,EACA6J,EAAAvC,EA+BA,IA5BA/C,GAAA,IACAyG,EAAAnD,EAGAA,EAAA,EACAtE,IAAAY,QAAA,QACAgK,EAAA,IAAApI,EAAA8H,GACAhF,EAAAsF,EAAApM,IAAAwB,EAAAvG,OAAAuH,GACAsD,EAAAmD,EAKAmD,EAAA1F,EAAAmF,EAAAzD,EAAAF,EAAApB,EAAAJ,GAAAI,EAAAlM,EAAA,KACA,GAAAmR,EAAAH,GACAQ,EAAAxR,EAAAwR,EAAA1F,EAAAzL,QAKAmO,EAAAyC,EAAArK,EAAAsK,EAAAC,EAAAI,GACA1F,EAAAH,EAAAsF,IACAnF,EAAAmF,EAAAtF,IAGA1L,EAAAqO,EAAAG,EAAAnO,OAGc,GAAAmO,IAAAH,GAAcG,EAAAP,OAG5B,IAAAO,EAAA,UAAA3C,EAAAiB,OAAA,GAqCA,GAlCAlF,EAAA,IACA5H,GAEAkM,EAAAJ,EAAA0C,EACAtC,EAAAlM,IAGAkM,EAAAC,EAAAmF,EACApF,EAAAhH,EAAAgH,EAAAsF,EAAAd,EAAAxD,EAAAiE,GACA3C,EAAAtC,EAAAJ,EACAqC,EAAAjC,EAAAiC,EACAnO,EAAAkM,EAAAlM,GAMAoO,EAAApO,EAAA0Q,EAAA,EAGA9I,EAAA4G,EAAAJ,GAIAC,EAAA8C,EAAA,EACAhD,KAAAC,EAAA,SAAAI,EAAAJ,EAAA,GAEAD,EAAAjB,EAAA,SAAAtF,GAAAuG,KAAA,GAAAjB,OAAAhB,EAAAC,EAAA,QACAvE,EAAAyG,GAAAzG,GAAAyG,IAAA,GAAAnB,GAAAiB,GAAA,GAAAjB,GAAA,EAAAsB,EAAAJ,EAAA,IACAlB,IAAAhB,EAAAC,EAAA,QAKAiC,EAAA,IAAAI,EAAA,GAGA5H,EAAAuH,EAAAX,EAAA3B,EAAAiB,OAAA,IAAA4D,EAAA7E,EAAAiB,OAAA,IACAjB,EAAAiB,OAAA,OACS,CAMT,GAHA0B,EAAAnO,OAAA+N,EAGAD,EAGA,MAAAgD,IAA2B3C,IAAAJ,GAAA+C,GAC3B3C,EAAAJ,GAAA,EAEAA,MACApO,EACAwO,GAAA,GAAAiD,OAAAjD,IAMA,IAAAH,EAAAG,EAAAnO,QAA6BmO,IAAAH,KAG7B,IAAAzG,EAAA,EAAAhB,EAAA,GAA+BgB,GAAAyG,EAAQzH,GAAAiF,EAAAiB,OAAA0B,EAAA5G,OAGvChB,EAAA4G,EAAA5G,EAAA5G,EAAA6L,EAAAiB,OAAA,IAIA,OAAAlG,GAlJA,GAwJA1B,EAAA,WAGA,SAAAwM,EAAAxF,EAAAmC,EAAAsD,GACA,IAAA/D,EAAAgE,EAAAC,EAAAC,EACAC,EAAA,EACAnK,EAAAsE,EAAA7L,OACA2R,EAAA3D,EAAArE,EACAiI,EAAA5D,EAAArE,EAAA,EAEA,IAAAkC,IAAAE,QAA2BxE,KAC3BiK,EAAA3F,EAAAtE,GAAAoC,EACA8H,EAAA5F,EAAAtE,GAAAoC,EAAA,EACA4D,EAAAqE,EAAAJ,EAAAC,EAAAE,EACAJ,EAAAI,EAAAH,EAAAjE,EAAA5D,IAAA+H,EACAA,GAAAH,EAAAD,EAAA,IAAA/D,EAAA5D,EAAA,GAAAiI,EAAAH,EACA5F,EAAAtE,GAAAgK,EAAAD,EAKA,OAFAI,IAAA7F,GAAA6F,GAAAN,OAAAvF,IAEAA,EAGA,SAAAgG,EAAAvB,EAAA/E,EAAAuG,EAAAC,GACA,IAAAxK,EAAAyK,EAEA,GAAAF,GAAAC,EACAC,EAAAF,EAAAC,EAAA,UAGA,IAAAxK,EAAAyK,EAAA,EAA2BzK,EAAAuK,EAAQvK,IAEnC,GAAA+I,EAAA/I,IAAAgE,EAAAhE,GAAA,CACAyK,EAAA1B,EAAA/I,GAAAgE,EAAAhE,GAAA,KACA,MAKA,OAAAyK,EAGA,SAAAC,EAAA3B,EAAA/E,EAAAuG,EAAAR,GAIA,IAHA,IAAA/J,EAAA,EAGcuK,KACdxB,EAAAwB,IAAAvK,EACAA,EAAA+I,EAAAwB,GAAAvG,EAAAuG,GAAA,IACAxB,EAAAwB,GAAAvK,EAAA+J,EAAAhB,EAAAwB,GAAAvG,EAAAuG,GAIA,MAAcxB,EAAA,IAAAA,EAAAtQ,OAAA,EAAuBsQ,EAAAI,OAAA,OAIrC,gBAAA7E,EAAAsF,EAAAd,EAAAxD,EAAAyE,GACA,IAAAU,EAAArS,EAAA4H,EAAA2K,EAAA5G,EAAA6G,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EACAC,EAAAC,EACAhH,EAAAD,EAAAC,GAAAqF,EAAArF,EAAA,KACAqC,EAAAtC,EAAAJ,EACAsH,EAAA5B,EAAA1F,EAGA,IAAA0C,MAAA,KAAA4E,MAAA,GAEA,WAAAhK,EAGA8C,EAAAC,GAAAqF,EAAArF,IAAAqC,GAAA4E,GAAA5E,EAAA,IAAA4E,EAAA,GAAAA,GAGA5E,GAAA,GAAAA,EAAA,KAAA4E,EAAA,EAAAjH,IAAA,EAHA/E,KAoBA,IAbAsL,EAAA,IAAAtJ,EAAA+C,GACAwG,EAAAD,EAAA5G,KACA9L,EAAAkM,EAAAlM,EAAAwR,EAAAxR,EACAmM,EAAAuE,EAAA1Q,EAAA,EAEA2R,IACAA,EAAA/H,EACA5J,EAAAqT,EAAAnH,EAAAlM,EAAA6J,GAAAwJ,EAAA7B,EAAAxR,EAAA6J,GACAsC,IAAAtC,EAAA,GAKAjC,EAAA,EAAmBwL,EAAAxL,KAAA4G,EAAA5G,IAAA,GAAuBA,KAI1C,GAFAwL,EAAAxL,IAAA4G,EAAA5G,IAAA,IAAA5H,IAEAmM,EAAA,EACAwG,EAAAtM,KAAA,GACAkM,GAAA,MACS,CAwBT,IAvBAS,EAAAxE,EAAAnO,OACA6S,EAAAE,EAAA/S,OACAuH,EAAA,EACAuE,GAAA,EAIAR,EAAAnC,EAAAmI,GAAAyB,EAAA,OAIAzH,EAAA,IACAyH,EAAA1B,EAAA0B,EAAAzH,EAAAgG,GACAnD,EAAAkD,EAAAlD,EAAA7C,EAAAgG,GACAuB,EAAAE,EAAA/S,OACA2S,EAAAxE,EAAAnO,QAGA0S,EAAAG,EACAN,EAAApE,EAAApC,MAAA,EAAA8G,GACAL,EAAAD,EAAAvS,OAGgBwS,EAAAK,EAAWN,EAAAC,KAAA,GAC3BM,EAAAC,EAAAhH,QACA+G,GAAA,GAAA1B,OAAA0B,GACAF,EAAAG,EAAA,GACAA,EAAA,IAAAzB,EAAA,GAAAsB,IAIA,GAOA,GANAtH,EAAA,EAGA0G,EAAAH,EAAAkB,EAAAR,EAAAM,EAAAL,GAGAR,EAAA,GAqBA,GAjBAS,EAAAF,EAAA,GACAM,GAAAL,IAAAC,IAAAnB,GAAAiB,EAAA,QAGAjH,EAAAnC,EAAAsJ,EAAAG,GAaAtH,EAAA,GAGAA,GAAAgG,IAAAhG,EAAAgG,EAAA,GAGAa,EAAAd,EAAA0B,EAAAzH,EAAAgG,GACAc,EAAAD,EAAAnS,OACAwS,EAAAD,EAAAvS,OAMA,SAAA6R,EAAAM,EAAAI,EAAAH,EAAAI,GACAlH,IAGA2G,EAAAE,EAAAU,EAAAT,EAAAU,EAAAC,EAAAX,EAAAd,GACAc,EAAAD,EAAAnS,OACAgS,EAAA,OAQA,GAAA1G,IAGA0G,EAAA1G,EAAA,GAIA6G,EAAAY,EAAAhH,QACAqG,EAAAD,EAAAnS,OAUA,GAPAoS,EAAAI,IAAAL,GAAA,GAAAf,OAAAe,IAGAF,EAAAM,EAAAJ,EAAAK,EAAAlB,GACAkB,EAAAD,EAAAvS,QAGA,GAAAgS,EAMA,MAAAH,EAAAkB,EAAAR,EAAAM,EAAAL,GAAA,EACAlH,IAGA2G,EAAAM,EAAAM,EAAAL,EAAAM,EAAAC,EAAAP,EAAAlB,GACAkB,EAAAD,EAAAvS,YAGa,IAAAgS,IACb1G,IACAiH,GAAA,IAIAD,EAAA/K,KAAA+D,EAGAiH,EAAA,GACAA,EAAAC,KAAArE,EAAAuE,IAAA,GAEAH,GAAApE,EAAAuE,IACAF,EAAA,UAEWE,IAAAC,GAAA,MAAAJ,EAAA,KAAAzG,KAEXoG,EAAA,MAAAK,EAAA,GAGAD,EAAA,IAAAA,EAAA5B,OAAA,KAGA,GAAAY,GAAA/H,EAAA,CAGA,IAAAhC,EAAA,EAAAuE,EAAAwG,EAAA,GAAgCxG,GAAA,GAASA,GAAA,GAAAvE,KAEzC+E,EAAA+F,EAAAhC,GAAAgC,EAAA1S,EAAA4H,EAAA5H,EAAA6J,EAAA,KAAAqD,EAAAqF,QAIAG,EAAA1S,IACA0S,EAAAvE,GAAAoE,EAGA,OAAAG,GA9PA,GAiYArI,EAAA,WACA,IAAAiJ,EAAA,8BACAC,EAAA,cACAC,EAAA,cACAC,EAAA,qBACAC,EAAA,6BAEA,gBAAAxH,EAAAtF,EAAAoF,EAAAJ,GACA,IAAA+F,EACAxF,EAAAH,EAAApF,IAAAY,QAAAkM,EAAA,IAGA,GAAAD,EAAApH,KAAAF,GACAD,EAAAC,EAAAwH,MAAAxH,GAAA,KAAAA,EAAA,OACAD,EAAAJ,EAAAI,EAAAlM,EAAA,SACS,CACT,IAAAgM,IAGAG,IAAA3E,QAAA8L,EAAA,SAAA1F,EAAAgG,EAAAC,GAEA,OADAlC,EAAA,MAAAkC,IAAA7G,eAAA,QAAA6G,EAAA,IACAjI,MAAA+F,EAAA/D,EAAAgG,IAGAhI,IACA+F,EAAA/F,EAGAO,IAAA3E,QAAA+L,EAAA,MAAA/L,QAAAgM,EAAA,SAGA5M,GAAAuF,GAAA,WAAA/C,EAAA+C,EAAAwF,GAKA,GAAAvI,EAAAwD,MACA,MAAAC,MACAnD,EAAA,SAAAkC,EAAA,SAAAA,EAAA,gBAAAhF,GAIAsF,EAAAJ,EAAAI,EAAAlM,EAAAkM,EAAAC,EAAA,OA1CA,GAwNA7B,EAAAwJ,cAAAxJ,EAAAyJ,IAAA,WACA,IAAA7H,EAAA,IAAA9C,EAAA1K,MAEA,OADAwN,EAAAC,EAAA,IAAAD,EAAAC,EAAA,GACAD,GAWA5B,EAAA0J,WAAA,SAAAxC,EAAA5F,GACA,OAAAsG,EAAAxT,KAAA,IAAA0K,EAAAoI,EAAA5F,KAiBAtB,EAAA2J,cAAA3J,EAAAoG,GAAA,SAAAA,EAAAxD,GACA,IAAApB,EAAAH,EAAA6D,EACAtD,EAAAxN,KAEA,SAAAgS,EAKA,OAJAhE,EAAAgE,EAAA,EAAAzG,GACA,MAAAiD,IAAAvC,EACA+B,EAAAQ,EAAA,KAEAP,EAAA,IAAAvD,EAAA8C,GAAAwE,EAAAxE,EAAAlM,EAAA,EAAAkN,GAGA,KAAApB,EAAAI,EAAAJ,GAAA,YAIA,GAHAH,IAAA6D,EAAA1D,EAAAzL,OAAA,GAAAgT,EAAA3U,KAAAsB,EAAA6J,MAGA2F,EAAA1D,EAAA0D,GAAA,KAA0BA,EAAA,MAAaA,GAAA,GAAA7D,KAGvC,OAFAA,EAAA,IAAAA,EAAA,GAEAA,GAwBArB,EAAA4J,UAAA5J,EAAApF,IAAA,SAAAsM,EAAA5F,GACA,OAAA1G,EAAAxG,KAAA,IAAA0K,EAAAoI,EAAA5F,GAAAvI,EAAAsH,IAQAL,EAAA6J,mBAAA7J,EAAA8J,KAAA,SAAA5C,EAAA5F,GACA,OAAA1G,EAAAxG,KAAA,IAAA0K,EAAAoI,EAAA5F,GAAA,MAmBAtB,EAAA+J,gBAAA/J,EAAAlF,IAAA,SAAAuG,EAAAiC,GACA,IAAA0G,EAAAC,EAAAlG,EAAAkE,EAAAiC,EAAAC,EAAAC,EAAAlD,EACAtF,EAAAxN,KAKA,GAHAiN,EAAA,IAAAvC,EAAAuC,GAGAA,EAAAG,IAAAH,EAAAgJ,YACA,MAAA9H,MACAnD,EAAA,4BAAAiC,GASA,GANA,MAAAiC,MAAA,IAAAxE,EAAAwE,IAGA4G,EAAA7I,EAAA3L,EAAA,IAGAkM,EAAAJ,IAAAI,EAAAJ,EAAA,OAAAI,EAAAJ,EAAA,KAAAI,EAAAlM,GAAA,GAAAkM,EAAAJ,EAAAzL,SAAAsL,EAAAG,IAAAH,EAAAG,EAAA,GAKA,OADA0F,EAAA,IAAApI,EAAAjE,KAAAC,KAAA8G,EAAAzB,UAAA+J,EAAA,EAAAI,EAAAjJ,QACAiC,EAAA4D,EAAAqD,IAAAjH,GAAA4D,EAKA,GAFAiD,EAAA9I,EAAAQ,EAAA,EAEAyB,EAAA,CAGA,GAAAA,EAAA9B,GAAA8B,EAAA9B,EAAA,IAAA8B,EAAAzB,EAAA,WAAA/C,EAAAhC,KAEAmN,GAAAE,GAAAvI,EAAAyI,aAAA/G,EAAA+G,YAEAJ,IAAArI,IAAA2I,IAAAjH,QAIO,IAAAjC,EAAA3L,EAAA,IAAAkM,EAAAlM,EAAA,GAAAkM,EAAAlM,GAAA,OAAAkM,EAAAlM,EAEPkM,EAAAJ,EAAA,MAAA0I,GAAAtI,EAAAJ,EAAA,SAEAI,EAAAJ,EAAA,SAAA0I,GAAAtI,EAAAJ,EAAA,gBASA,OANAuC,EAAAnC,EAAAC,EAAA,GAAAyI,EAAAjJ,IAAA,IAGAO,EAAAlM,GAAA,IAAAqO,EAAA,EAAAA,GAGA,IAAAjF,EAAAqL,EAAA,EAAApG,KAEOnD,IAKPmD,EAAA/E,EAAA4B,EAAArB,EAAA,IAeA,IAZA2K,GACAF,EAAA,IAAAlL,EAAA,IACAsL,EAAAE,EAAAjJ,IAEA+I,EAAA/I,EAAA,EAGA8I,IAAA9I,EAAAQ,EAAA,GAEAqF,EAAA,IAAApI,EAAAsB,KAGc,CAEd,GAAAgK,EAAA,CAEA,GADAlD,IAAAvM,MAAAiH,IACAsF,EAAA1F,EAAA,MAEAuC,EACAmD,EAAA1F,EAAAzL,OAAAgO,IAAAmD,EAAA1F,EAAAzL,OAAAgO,GACWkG,IACX/C,IAAAqD,IAAAjH,IAIA,GAAA4G,EAAA,CAGA,GAFA7I,IAAA1G,MAAAqP,GACA3H,EAAAhB,IAAA3L,EAAA,MACA2L,EAAAG,EAAA,SACA0I,EAAA7I,EAAA3L,EAAA,GACA0U,EAAAE,EAAAjJ,OACS,CAET,GADAA,EAAAnC,EAAAmC,EAAA,IACAA,EAAA,MACA+I,EAAA/I,EAAA,EAGAO,IAAAjH,MAAAiH,GAEAmC,EACAnC,EAAAJ,GAAAI,EAAAJ,EAAAzL,OAAAgO,IAAAnC,EAAAJ,EAAAzL,OAAAgO,GACSkG,IACTrI,IAAA2I,IAAAjH,IAIA,OAAA2G,EAAA/C,GACAiD,IAAAjD,EAAA9G,EAAAxF,IAAAsM,IAEA5D,EAAA4D,EAAAqD,IAAAjH,GAAAS,EAAA1B,EAAA6E,EAAAtG,EAAAP,EAAA4H,GAAAf,IAYAlH,EAAAwK,aAAA,SAAA5H,GACA,IAAAvB,EAAA,IAAAvC,EAAA1K,MAGA,OAFA,MAAAwO,IAAAvC,EACA+B,EAAAQ,EAAA,KACAP,EAAAhB,IAAA3L,EAAA,EAAAkN,IAQA5C,EAAAyK,UAAAzK,EAAA0K,GAAA,SAAAxD,EAAA5F,GACA,WAAAsG,EAAAxT,KAAA,IAAA0K,EAAAoI,EAAA5F,KAOAtB,EAAA2K,SAAA,WACA,QAAAvW,KAAAoN,GAQAxB,EAAA4K,cAAA5K,EAAAgG,GAAA,SAAAkB,EAAA5F,GACA,OAAAsG,EAAAxT,KAAA,IAAA0K,EAAAoI,EAAA5F,IAAA,GAQAtB,EAAA6K,uBAAA7K,EAAA8K,IAAA,SAAA5D,EAAA5F,GACA,YAAAA,EAAAsG,EAAAxT,KAAA,IAAA0K,EAAAoI,EAAA5F,MAAA,IAAAA,GAQAtB,EAAAqK,UAAA,WACA,QAAAjW,KAAAoN,GAAAuH,EAAA3U,KAAAsB,EAAA6J,GAAAnL,KAAAoN,EAAAzL,OAAA,GAQAiK,EAAA+K,WAAA/K,EAAA6F,GAAA,SAAAqB,EAAA5F,GACA,OAAAsG,EAAAxT,KAAA,IAAA0K,EAAAoI,EAAA5F,IAAA,GAQAtB,EAAAgL,oBAAAhL,EAAAiL,IAAA,SAAA/D,EAAA5F,GACA,YAAAA,EAAAsG,EAAAxT,KAAA,IAAA0K,EAAAoI,EAAA5F,MAAA,IAAAA,GAOAtB,EAAAqJ,MAAA,WACA,OAAAjV,KAAAyN,GAOA7B,EAAAkL,WAAA,WACA,OAAA9W,KAAAyN,EAAA,GAOA7B,EAAAmL,WAAA,WACA,OAAA/W,KAAAyN,EAAA,GAOA7B,EAAAoL,OAAA,WACA,QAAAhX,KAAAoN,GAAA,GAAApN,KAAAoN,EAAA,IAwBAxB,EAAAqL,MAAA,SAAAnE,EAAA5F,GACA,IAAAhE,EAAAoG,EAAA4H,EAAAC,EACA3J,EAAAxN,KACAiS,EAAAzE,EAAAC,EAMA,GAJAqF,EAAA,IAAApI,EAAAoI,EAAA5F,GACAA,EAAA4F,EAAArF,GAGAwE,IAAA/E,EAAA,WAAAxC,EAAAhC,KAGA,GAAAuJ,GAAA/E,EAEA,OADA4F,EAAArF,GAAAP,EACAM,EAAA4J,KAAAtE,GAGA,IAAAuE,EAAA7J,EAAAlM,EAAA6J,EACAmM,EAAAxE,EAAAxR,EAAA6J,EACA2E,EAAAtC,EAAAJ,EACAsH,EAAA5B,EAAA1F,EAEA,IAAAiK,IAAAC,EAAA,CAGA,IAAAxH,IAAA4E,EAAA,OAAA5E,GAAAgD,EAAArF,GAAAP,EAAA4F,GAAA,IAAApI,EAAAgK,EAAAlH,EAAA9E,KAGA,IAAAoH,EAAA,KAAA4E,EAAA,GAGA,OAAAA,EAAA,IAAA5B,EAAArF,GAAAP,EAAA4F,GAAA,IAAApI,EAAAoF,EAAA,GAAAtC,EAGA,GAAAvB,GAAA,KASA,GALAoL,EAAA1C,EAAA0C,GACAC,EAAA3C,EAAA2C,GACAxH,IAAApC,QAGAuE,EAAAoF,EAAAC,EAAA,CAaA,KAXAH,EAAAlF,EAAA,IACAA,KACAiF,EAAApH,IAEAwH,EAAAD,EACAH,EAAAxC,GAGAwC,EAAAvE,UAGAzF,EAAA+E,EAAmB/E,IAAKgK,EAAAvP,KAAA,IACxBuP,EAAAvE,eAMA,IAFArD,GAAA6H,GAAAlF,EAAAnC,EAAAnO,SAAAuL,EAAAwH,EAAA/S,SAAAsQ,EAAA/E,EAEA+E,EAAA/E,EAAA,EAAuBA,EAAAoC,EAAOpC,IAE9B,GAAA4C,EAAA5C,IAAAwH,EAAAxH,GAAA,CACAiK,EAAArH,EAAA5C,GAAAwH,EAAAxH,GACA,MAYA,GANAiK,IAAAD,EAAApH,IAAA4E,IAAAwC,EAAApE,EAAArF,GAAAqF,EAAArF,GAEAP,GAAAoC,EAAAoF,EAAA/S,SAAAuH,EAAA4G,EAAAnO,QAIAuL,EAAA,OAAuBA,IAAK4C,EAAA5G,KAAA,GAI5B,IAHAgE,EAAAhC,EAAA,EAGYoE,EAAA2C,GAAO,CAEnB,GAAAnC,IAAAR,GAAAoF,EAAApF,GAAA,CACA,IAAApG,EAAAoG,EAAqBpG,IAAA4G,IAAA5G,GAAe4G,EAAA5G,GAAAgE,KACpC4C,EAAA5G,GACA4G,EAAAR,IAAApE,EAGA4E,EAAAR,IAAAoF,EAAApF,GAIA,KAAY,GAAAQ,EAAA,GAAYA,EAAAuC,OAAA,OAAAiF,GAGxB,OAAAxH,EAAA,GAWAT,EAAAyD,EAAAhD,EAAAwH,IAPAxE,EAAArF,EAAA,GAAAxB,GAAA,IACA6G,EAAA1F,GAAA0F,EAAAxR,EAAA,GACAwR,IA8BAlH,EAAA2L,OAAA3L,EAAAuK,IAAA,SAAArD,EAAA5F,GACA,IAAA8G,EAAAvG,EACAD,EAAAxN,KAKA,OAHA8S,EAAA,IAAApI,EAAAoI,EAAA5F,IAGAM,EAAAJ,IAAA0F,EAAArF,GAAAqF,EAAA1F,IAAA0F,EAAA1F,EAAA,GACA,IAAA1C,EAAAhC,MAGOoK,EAAA1F,GAAAI,EAAAJ,IAAAI,EAAAJ,EAAA,GACP,IAAA1C,EAAA8C,IAGA,GAAAjB,GAIAkB,EAAAqF,EAAArF,EACAqF,EAAArF,EAAA,EACAuG,EAAAxN,EAAAgH,EAAAsF,EAAA,KACAA,EAAArF,IACAuG,EAAAvG,MAEAuG,EAAAxN,EAAAgH,EAAAsF,EAAA,EAAAvG,GAGAuG,EAAAtF,EAAAyJ,MAAAjD,EAAAzN,MAAAuM,IAGAA,EAAA1F,EAAA,OAAAb,IAAAuG,EAAArF,EAAAD,EAAAC,GAEAqF,IAwBAlH,EAAA4L,aAAA5L,EAAArF,MAAA,SAAAuM,EAAA5F,GACA,IAAAE,EAAA9L,EAAA4H,EAAAoG,EAAAK,EAAAT,EAAAuI,EAAAtE,EAAAC,EAAAsE,EAAAC,EAAAC,EAAAC,EACA5E,EAAA6E,EACAtK,EAAAxN,KACA8P,EAAAtC,EAAAJ,EACAsH,GAAA5B,EAAA,IAAApI,EAAAoI,EAAA5F,IAAAE,EAGA,IAAA0C,IAAA4E,IAAA5E,EAAA,KAAA4E,EAAA,GAmBA,OAhBAlH,EAAAC,IAAAqF,EAAArF,GAAAqC,MAAA,KAAA4E,SAAA,KAAA5E,EACAgD,EAAA1F,EAAA0F,EAAAxR,EAAAwR,EAAArF,EAAA,MAEAqF,EAAArF,GAAAD,EAAAC,EAGAqC,GAAA4E,GAKA5B,EAAA1F,GAAA,GACA0F,EAAAxR,EAAA,GALAwR,EAAA1F,EAAA0F,EAAAxR,EAAA,MASAwR,EAYA,IATAxR,EAAAqT,EAAAnH,EAAAlM,EAAA6J,GAAAwJ,EAAA7B,EAAAxR,EAAA6J,GACA2H,EAAArF,GAAAD,EAAAC,EACAgK,EAAA3H,EAAAnO,OACA+V,EAAAhD,EAAA/S,OAGA8V,EAAAC,IAAAG,EAAA/H,IAAA4E,IAAAmD,EAAA3O,EAAAuO,IAAAC,IAAAxO,GAGAA,EAAAuO,EAAAC,EAAAG,KAAkC3O,IAAK2O,EAAAlQ,KAAA,IAKvC,IAHAsL,EAAA/H,EACA4M,EAAAxM,EAEApC,EAAAwO,IAAmBxO,GAAA,GAAU,CAK7B,IAJAkE,EAAA,EACAuK,EAAAjD,EAAAxL,GAAA4O,EACAF,EAAAlD,EAAAxL,GAAA4O,EAAA,EAEAnI,EAAA8H,EAAAnI,EAAApG,EAAAyG,EAAgCL,EAAApG,GAChCiK,EAAArD,IAAAH,GAAAmI,EACA1E,EAAAtD,EAAAH,GAAAmI,EAAA,EACA5I,EAAA0I,EAAAzE,EAAAC,EAAAuE,EACAxE,EAAAwE,EAAAxE,EAAAjE,EAAA4I,IAAAD,EAAAvI,GAAAlC,EACAA,GAAA+F,EAAAF,EAAA,IAAA/D,EAAA4I,EAAA,GAAAF,EAAAxE,EACAyE,EAAAvI,KAAA6D,EAAAF,EAGA4E,EAAAvI,GAAAlC,EASA,OANAA,IACA9L,EAEAuW,EAAAxF,OAAA,KAGAhD,EAAAyD,EAAA+E,EAAAvW,IAQAsK,EAAAmM,QAAA,WACA,IAAAvK,EAAA,IAAA9C,EAAA1K,MAEA,OADAwN,EAAAC,GAAAD,EAAAC,GAAA,KACAD,GAwBA5B,EAAAwL,KAAA,SAAAtE,EAAA5F,GACA,IAAAgK,EACA1J,EAAAxN,KACAiS,EAAAzE,EAAAC,EAMA,GAJAqF,EAAA,IAAApI,EAAAoI,EAAA5F,GACAA,EAAA4F,EAAArF,GAGAwE,IAAA/E,EAAA,WAAAxC,EAAAhC,KAGA,GAAAuJ,GAAA/E,EAEA,OADA4F,EAAArF,GAAAP,EACAM,EAAAyJ,MAAAnE,GAGA,IAAAuE,EAAA7J,EAAAlM,EAAA6J,EACAmM,EAAAxE,EAAAxR,EAAA6J,EACA2E,EAAAtC,EAAAJ,EACAsH,EAAA5B,EAAA1F,EAEA,IAAAiK,IAAAC,EAAA,CAGA,IAAAxH,IAAA4E,EAAA,WAAAhK,EAAAuH,EAAA,GAIA,IAAAnC,EAAA,KAAA4E,EAAA,UAAAA,EAAA,GAAA5B,EAAA,IAAApI,EAAAoF,EAAA,GAAAtC,EAAA,EAAAyE,GAQA,GALAoF,EAAA1C,EAAA0C,GACAC,EAAA3C,EAAA2C,GACAxH,IAAApC,QAGAuE,EAAAoF,EAAAC,EAAA,CAUA,IATArF,EAAA,GACAqF,EAAAD,EACAH,EAAAxC,IAEAzC,KACAiF,EAAApH,GAGAoH,EAAAvE,UACcV,IAAKiF,EAAAvP,KAAA,IACnBuP,EAAAvE,UAUA,IAPAV,EAAAnC,EAAAnO,OACAuL,EAAAwH,EAAA/S,OAGAsQ,EAAA/E,EAAA,IAAAgK,EAAAxC,IAAA5E,IAAAoH,EAAAhK,EAAA+E,GAGAA,EAAA,EAAiB/E,GACjB+E,GAAAnC,IAAA5C,GAAA4C,EAAA5C,GAAAwH,EAAAxH,GAAA+E,GAAA/G,EAAA,EACA4E,EAAA5C,GAAAhC,IAAA4E,EAAA5C,GAAA,EAAA4C,EAAA5C,GAAAhC,EAUA,OAPA+G,IACAnC,GAAAmC,GAAAc,OAAAjD,KACAwH,GAKAjI,EAAAyD,EAAAhD,EAAAwH,IAmBA1L,EAAAoM,UAAApM,EAAA4D,GAAA,SAAAA,EAAAhB,GACA,IAAApB,EAAAH,EAAA6D,EACAtD,EAAAxN,KAEA,SAAAwP,WAKA,OAJAxB,EAAAwB,EAAA,EAAAjE,GACA,MAAAiD,IAAAvC,EACA+B,EAAAQ,EAAA,KAEAP,EAAA,IAAAvD,EAAA8C,GAAAgC,EAAAhB,GAGA,KAAApB,EAAAI,EAAAJ,GAAA,YAIA,GAHA0D,EAAA1D,EAAAzL,OAAA,EACAsL,EAAA6D,EAAA3F,EAAA,EAEA2F,EAAA1D,EAAA0D,GAAA,CAGA,KAAcA,EAAA,MAAaA,GAAA,GAAA7D,KAG3B,IAAA6D,EAAA1D,EAAA,GAAsB0D,GAAA,GAASA,GAAA,GAAA7D,MAK/B,OAFAuC,GAAAhC,EAAAlM,EAAA,EAAA2L,MAAAO,EAAAlM,EAAA,GAEA2L,GAYArB,EAAAqM,UAAA,SAAAtI,GAEA,OADA3B,EAAA2B,GAAAvE,KACApL,KAAAuG,MAAA,KAAAoJ,IAeA/D,EAAAsM,WAAAtM,EAAAuM,KAAA,WACA,IAAAjJ,EAAAjC,EAAAwC,EAAA2I,EAAAlB,EACA1J,EAAAxN,KACAoN,EAAAI,EAAAJ,EACAK,EAAAD,EAAAC,EACAnM,EAAAkM,EAAAlM,EACA0Q,EAAArN,EAAA,EACAiR,EAAA,IAAAlL,EAAA,OAGA,OAAA+C,IAAAL,MAAA,GACA,WAAA1C,GAAA+C,KAAA,KAAAL,KAAA,IAAA1E,IAAA0E,EAAAI,EAAA,KA8BA,GA1BAC,EAAAhH,KAAA0R,MAAA3K,GAIA,GAAAC,MAAA,KACAR,EAAA2B,EAAAxB,IACAH,EAAAtL,OAAAL,GAAA,OAAA2L,GAAA,KACAQ,EAAAhH,KAAA0R,KAAAlL,GACA3L,EAAAqT,GAAArT,EAAA,OAAAA,EAAA,GAAAA,EAAA,GAEAmM,GAAA,IACAR,EAAA,KAAA3L,GAEA2L,EAAAQ,EAAAoB,gBACA5B,IAAAS,MAAA,EAAAT,EAAAY,QAAA,QAAAvM,GAGAmO,EAAA,IAAA/E,EAAAuC,IAEAwC,EAAA,IAAA/E,EAAA+C,EAAA,IAOAgC,EAAArC,EAAA,GAMA,IALA9L,EAAAmO,EAAAnO,EACAmM,EAAAnM,EAAA0Q,EACAvE,EAAA,IAAAA,EAAA,KAOA,GAHAyJ,EAAAzH,EACAA,EAAAmG,EAAArP,MAAA2Q,EAAAE,KAAA5Q,EAAAgH,EAAA0J,EAAAlF,EAAA,KAEApD,EAAAsI,EAAA9J,GAAAM,MAAA,EAAAD,MAAAR,EACA2B,EAAAa,EAAArC,IAAAM,MAAA,EAAAD,GAAA,CAWA,GANAgC,EAAAnO,OAAAmM,EACAR,IAAAS,MAAAD,EAAA,EAAAA,EAAA,GAKA,QAAAR,IAAAmL,GAAA,QAAAnL,GAgBa,EAIbA,OAAAS,MAAA,SAAAT,EAAAmB,OAAA,MAGAH,EAAAwB,IAAAnO,EAAAqD,EAAA,KACAuK,GAAAO,EAAAlJ,MAAAkJ,GAAA6G,GAAA9I,IAGA,MAvBA,IAAA4K,IACAnK,EAAAiJ,IAAA5V,EAAAqD,EAAA,KAEAuS,EAAA3Q,MAAA2Q,GAAAZ,GAAA9I,IAAA,CACAiC,EAAAyH,EACA,MAIAlF,GAAA,EACAvE,GAAA,EACA2K,EAAA,EAkBA,OAAAnK,EAAAwB,IAAAnO,EAAAqD,EAAA,EAAAsH,EAAAiD,IAaAtD,EAAAiD,cAAA,SAAAmD,EAAAxD,GAKA,OAJA,MAAAwD,IACAhE,EAAAgE,EAAA,EAAAzG,GACAyG,KAEAzD,EAAAvO,KAAAgS,EAAAxD,EAAA,IAgBA5C,EAAA9E,QAAA,SAAAkL,EAAAxD,GAKA,OAJA,MAAAwD,IACAhE,EAAAgE,EAAA,EAAAzG,GACAyG,IAAAhS,KAAAsB,EAAA,GAEAiN,EAAAvO,KAAAgS,EAAAxD,IAuBA5C,EAAAyM,SAAA,SAAArG,EAAAxD,GACA,IAAAtG,EAAAlI,KAAA8G,QAAAkL,EAAAxD,GAEA,GAAAxO,KAAAoN,EAAA,CACA,IAAAlE,EACArD,EAAAqC,EAAA/B,MAAA,KACAmS,GAAA7L,EAAAG,UACA2L,GAAA9L,EAAAI,mBACAF,EAAAF,EAAAE,eACA6L,EAAA3S,EAAA,GACA4S,EAAA5S,EAAA,GACA6S,EAAA1Y,KAAAyN,EAAA,EACAkL,EAAAD,EAAAF,EAAA9K,MAAA,GAAA8K,EACAjL,EAAAoL,EAAAhX,OAIA,GAFA4W,IAAArP,EAAAoP,IAAAC,IAAArP,EAAAqE,GAAArE,GAEAoP,EAAA,GAAA/K,EAAA,GAIA,IAHArE,EAAAqE,EAAA+K,KACAE,EAAAG,EAAAC,OAAA,EAAA1P,GAEgBA,EAAAqE,EAASrE,GAAAoP,EACzBE,GAAA7L,EAAAgM,EAAAC,OAAA1P,EAAAoP,GAGAC,EAAA,IAAAC,GAAA7L,EAAAgM,EAAAjL,MAAAxE,IACAwP,IAAAF,EAAA,IAAAA,GAGAtQ,EAAAuQ,EACAD,EAAA/L,EAAAC,mBAAA6L,GAAA9L,EAAAM,mBACA0L,EAAA3P,QAAA,IAAA+P,OAAA,OAAiDN,EAAA,OAAW,KAC5D,KAAA9L,EAAAK,wBACA2L,GACAD,EAGA,OAAAtQ,GAeA0D,EAAAkN,WAAA,SAAAC,GACA,IAAAlT,EAAA6J,EAAAsJ,EAAAC,EAAAC,EAAA5X,EAAA6X,EAAAlM,EAAAmM,EAAAC,EAAArF,EAAAvG,EACAD,EAAAxN,KACA8P,EAAAtC,EAAAJ,EAEA,SAAA2L,IACA9L,EAAA,IAAAvC,EAAAqO,IAGA9L,EAAAgJ,cAAAhJ,EAAAG,GAAA,IAAAH,EAAAQ,IAAAR,EAAAwE,GAAAzF,IACA,MAAAmC,MACAnD,EAAA,aACAiC,EAAAgJ,YAAA,qCAAA8C,GAIA,IAAAjJ,EAAA,OAAAtC,EAAA7G,WAoBA,IAlBA+I,EAAA,IAAAhF,EAAAsB,GACAqN,EAAAL,EAAA,IAAAtO,EAAAsB,GACAiN,EAAAG,EAAA,IAAA1O,EAAAsB,GACAyB,EAAAmB,EAAAkB,GAIAxO,EAAAoO,EAAApO,EAAAmM,EAAA9L,OAAA6L,EAAAlM,EAAA,EACAoO,EAAAtC,EAAA,GAAA/B,GAAA8N,EAAA7X,EAAA6J,GAAA,EAAAA,EAAAgO,KACAJ,MAAA9L,EAAAqI,WAAA5F,GAAA,EAAApO,EAAA,EAAAoO,EAAA2J,EAAApM,EAEAkM,EAAA9M,EACAA,EAAA,IACAY,EAAA,IAAAvC,EAAA+C,GAGA2L,EAAAhM,EAAA,OAEc,CAGd,GAFA4G,EAAAxN,EAAAyG,EAAAyC,EAAA,KACAwJ,EAAAF,EAAA5B,KAAApD,EAAAzN,MAAA0S,IACA,GAAAC,EAAA5D,WAAAyD,GAAA,MACAC,EAAAC,EACAA,EAAAC,EACAG,EAAAD,EAAAhC,KAAApD,EAAAzN,MAAA2S,EAAAG,IACAD,EAAAF,EACAxJ,EAAAzC,EAAAgK,MAAAjD,EAAAzN,MAAA2S,EAAAxJ,IACAzC,EAAAiM,EAgBA,OAbAA,EAAA1S,EAAAuS,EAAA9B,MAAA+B,GAAAC,EAAA,KACAG,IAAAhC,KAAA8B,EAAA3S,MAAA8S,IACAL,IAAA5B,KAAA8B,EAAA3S,MAAA0S,IACAG,EAAA3L,EAAA4L,EAAA5L,EAAAD,EAAAC,EACAnM,GAAA,EAGAuE,EAAAW,EAAA6S,EAAAJ,EAAA3X,EAAA2K,GAAAgL,MAAAzJ,GAAA6H,MAAAC,WACA9O,EAAA4S,EAAAJ,EAAA1X,EAAA2K,GAAAgL,MAAAzJ,GAAA6H,OAAA,GACAgE,EAAA1S,WAAAsS,EAAAtS,aACAyS,EAAAzS,WAAAqS,EAAArS,YAEA0F,EAAA8M,EACAtT,GAOA+F,EAAA0N,SAAA,WACA,OAAAtZ,MAeA4L,EAAA2N,YAAA,SAAA/J,EAAAhB,GAEA,OADA,MAAAgB,GAAAxB,EAAAwB,EAAA,EAAAjE,GACAgD,EAAAvO,KAAAwP,EAAAhB,EAAA,IAeA5C,EAAAjF,SAAA,SAAAuG,GACA,IAAAhF,EACA+E,EAAAjN,KACAyN,EAAAR,EAAAQ,EACAnM,EAAA2L,EAAA3L,EA0BA,OAvBA,OAAAA,EAEAmM,GACAvF,EAAA,WACAuF,EAAA,IAAAvF,EAAA,IAAAA,IAEAA,EAAA,OAGAA,EAAA0G,EAAA3B,EAAAG,GAEA,MAAAF,EACAhF,EAAA5G,GAAA4K,GAAA5K,GAAA6K,EACA0C,EAAA3G,EAAA5G,GACAwN,EAAA5G,EAAA5G,EAAA,MAEA0M,EAAAd,EAAA,EAAAF,EAAArL,OAAA,QACAuG,EAAAwD,EAAAoD,EAAA5G,EAAA5G,EAAA,QAAA4L,EAAAO,GAAA,IAGAA,EAAA,GAAAR,EAAAG,EAAA,KAAAlF,EAAA,IAAAA,IAGAA,GAQA0D,EAAAG,QAAAH,EAAA4N,OAAA,WACA,IAAAtR,EACA+E,EAAAjN,KACAsB,EAAA2L,EAAA3L,EAEA,cAAAA,EAAA2L,EAAAtG,YAEAuB,EAAA0G,EAAA3B,EAAAG,GAEAlF,EAAA5G,GAAA4K,GAAA5K,GAAA6K,EACA0C,EAAA3G,EAAA5G,GACAwN,EAAA5G,EAAA5G,EAAA,KAEA2L,EAAAQ,EAAA,MAAAvF,MAIA0D,EAAAyF,cAAA,EAEA,MAAA5F,GAAAf,EAAAhG,IAAA+G,GAEAf,EAOA,SAAAiK,EAAA1H,GACA,IAAA/D,EAAA,EAAA+D,EACA,OAAAA,EAAA,GAAAA,IAAA/D,MAAA,EAKA,SAAA0F,EAAAqD,GAMA,IALA,IAAAxE,EAAAgM,EACAvQ,EAAA,EACAoG,EAAA2C,EAAAtQ,OACA8N,EAAAwC,EAAA,MAEU/I,EAAAoG,GAAO,CAGjB,IAFA7B,EAAAwE,EAAA/I,KAAA,GACAuQ,EAAAtO,EAAAsC,EAAA9L,OACY8X,IAAKhM,EAAA,IAAAA,GACjBgC,GAAAhC,EAIA,IAAA6B,EAAAG,EAAA9N,OAAsB,KAAA8N,EAAA7B,aAAA0B,KACtB,OAAAG,EAAA/B,MAAA,EAAA4B,EAAA,MAKA,SAAAkE,EAAAhG,EAAAsF,GACA,IAAAb,EAAA/E,EACA4C,EAAAtC,EAAAJ,EACAsH,EAAA5B,EAAA1F,EACAlE,EAAAsE,EAAAC,EACA6B,EAAAwD,EAAArF,EACAkC,EAAAnC,EAAAlM,EACAoY,EAAA5G,EAAAxR,EAGA,IAAA4H,IAAAoG,EAAA,YAMA,GAJA2C,EAAAnC,MAAA,GACA5C,EAAAwH,MAAA,GAGAzC,GAAA/E,EAAA,OAAA+E,EAAA/E,EAAA,GAAAoC,EAAApG,EAGA,GAAAA,GAAAoG,EAAA,OAAApG,EAMA,GAJA+I,EAAA/I,EAAA,EACAgE,EAAAyC,GAAA+J,GAGA5J,IAAA4E,EAAA,OAAAxH,EAAA,GAAA4C,EAAAmC,EAAA,KAGA,IAAA/E,EAAA,OAAAyC,EAAA+J,EAAAzH,EAAA,KAKA,IAHA3C,GAAAK,EAAAG,EAAAnO,SAAA+X,EAAAhF,EAAA/S,QAAAgO,EAAA+J,EAGAxQ,EAAA,EAAeA,EAAAoG,EAAOpG,IAAA,GAAA4G,EAAA5G,IAAAwL,EAAAxL,GAAA,OAAA4G,EAAA5G,GAAAwL,EAAAxL,GAAA+I,EAAA,KAGtB,OAAAtC,GAAA+J,EAAA,EAAA/J,EAAA+J,EAAAzH,EAAA,KAOA,SAAAjE,EAAAf,EAAA0E,EAAAJ,EAAAnO,GACA,GAAA6J,EAAA0E,GAAA1E,EAAAsE,GAAAtE,OAAA,EAAArC,EAAAqC,GAAAnC,EAAAmC,IACA,MAAAkB,MACAnD,GAAA5H,GAAA,8BAAA6J,EACAA,EAAA0E,GAAA1E,EAAAsE,EAAA,sCACA,6BAAAtE,GAKA,SAAAkC,EAAAyB,GACA,wBAAA3J,OAAA4E,UAAAlF,SAAAyI,KAAAwB,GAKA,SAAAsF,EAAAjJ,GACA,IAAA0C,EAAA1C,EAAAG,EAAAzL,OAAA,EACA,OAAAgT,EAAA1H,EAAA3L,EAAA6J,IAAAwE,GAAA1C,EAAAG,EAAAuC,GAAA,KAIA,SAAAd,EAAA3G,EAAA5G,GACA,OAAA4G,EAAAvG,OAAA,EAAAuG,EAAAkG,OAAA,OAAAlG,EAAAwF,MAAA,GAAAxF,IACA5G,EAAA,YAAAA,EAIA,SAAAwN,EAAA5G,EAAA5G,EAAAmY,GACA,IAAAlM,EAAAoM,EAGA,GAAArY,EAAA,GAGA,IAAAqY,EAAAF,EAAA,MAAwBnY,EAAKqY,GAAAF,GAC7BvR,EAAAyR,EAAAzR,OAOA,GAHAqF,EAAArF,EAAAvG,SAGAL,EAAAiM,EAAA,CACA,IAAAoM,EAAAF,EAAAnY,GAAAiM,IAA8BjM,EAAKqY,GAAAF,GACnCvR,GAAAyR,OACOrY,EAAAiM,IACPrF,IAAAwF,MAAA,EAAApM,GAAA,IAAA4G,EAAAwF,MAAApM,IAIA,OAAA4G,EAOAwC,EAAAc,IACAd,EAAA,WAAAA,cAIAF,EAAA,WAAwB,OAAAE,GAAoB0E,KAAAwK,EAAAC,EAAAD,EAAAE,QAAAC,IAAAvP,IAAAsP,EAAAF,QAAApP,IA/uF3C","file":"js/chunk-a591.5c2460c1.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{},[_c('van-nav-bar',{attrs:{\"title\":\"合约制定\",\"left-text\":\"返回\",\"left-arrow\":\"\"},on:{\"click-left\":_vm.onClickLeft}}),_c('div',{staticClass:\"contract-wrapper\"},[_c('div',{staticClass:\"tip-area  mt-fs-14 mt-font-primary\"},[_vm._v(\"\\n      请自我检查输入的地址是否正确。Mwallet只负责提供技术支持。\\n    \")]),_c('div',[_c('div',{staticClass:\"clipboard-content mt-font-secondary mt-mb-20\"},[_c('div',{staticClass:\"van-hairline--surround \"},[(!_vm.startWitnSingle&&!_vm.originAddress)?_c('textarea',{staticClass:\"mt-flex-1\",attrs:{\"type\":\"textarea\",\"placeholder\":\"长按批量粘贴地址\",\"maxlength\":5000},on:{\"blur\":function (e) { return _vm.handleTextareaBlur(e, 'originAddress'); }}}):_c('div',{on:{\"click\":_vm.handleDeleteAll}},[_vm._v(\"全部删除\")])]),_c('div',{staticClass:\"van-hairline--surround \"},[(!_vm.startWitnSingle&&!_vm.originAmount)?_c('textarea',{staticClass:\"mt-flex-1\",attrs:{\"type\":\"textarea\",\"placeholder\":\"长按批量粘贴数量\",\"maxlength\":5000},on:{\"blur\":function (e) { return _vm.handleTextareaBlur(e, 'originAmount'); }}}):_c('div',{on:{\"click\":_vm.handleDeleteAllAmount}},[_vm._v(\"删除数量\")])])])]),(_vm.infoData.length>0)?_c('div',[_c('div',{staticClass:\"  data-item-header van-hairline--bottom  mt-fs-14\"},[_c('div'),_c('div',[_vm._v(\"地址\")]),_c('div',[_vm._v(\"数量(\"+_vm._s(_vm.contractData.symbol)+\")\")])]),_vm._l((_vm.infoData),function(item,index){return (_vm.currentActive !== index)?_c('div',{key:index,staticClass:\"data-item van-hairline--bottom mt-fs-14\",on:{\"click\":function($event){_vm.currentActive = index}}},[_c('div',[_vm._v(_vm._s(index+1))]),_c('div',[_vm._v(_vm._s(item.address))]),_c('div',{staticClass:\"van-hairline--surround \"},[_vm._v(_vm._s(item.amount))])]):_c('div',{staticClass:\"data-item van-hairline--bottom mt-fs-14\"},[_c('div',[_vm._v(_vm._s(index+1))]),_c('van-field',{staticClass:\"single-address\",on:{\"blur\":function($event){_vm.currentActive= null}},model:{value:(item.address),callback:function ($$v) {_vm.$set(item, \"address\", $$v)},expression:\"item.address\"}}),_c('van-field',{attrs:{\"type\":\"number\"},on:{\"blur\":function($event){_vm.currentActive= null}},model:{value:(item.amount),callback:function ($$v) {_vm.$set(item, \"amount\", $$v)},expression:\"item.amount\"}})],1)})],2):_vm._e(),_c('div',{staticClass:\"add-btn-area mt-text-center mt-flex mt-align-center mt-justify-around\"},[_c('div',{staticClass:\" add-btn van-hairline--surround\",on:{\"click\":_vm.handleAddSingle}},[_c('span',{staticClass:\"mt-fs-24 \"},[_vm._v(\"+\")]),_vm._v(\" 增加地址\\n      \")])]),_vm._m(0)]),_c('div',{staticClass:\"bottom-bar\"},[_c('div',{staticClass:\"n\"},[_c('span',[_vm._v(\"地址数:\")]),_c('span',[_vm._v(\"\\n        \"+_vm._s(_vm.infoData.length)+\",\\n      \")]),_c('span',[_vm._v(\"\\n       \"+_vm._s(_vm.contractData.symbol)+\" 总数: \"+_vm._s(_vm.total_amount)+\" \\n      \")])]),_c('div',{on:{\"click\":_vm.handleTransfer}},[_vm._v(\"\\n      转账\\n    \")])]),_c('van-popup',{attrs:{\"position\":\"bottom\"},model:{value:(_vm.popShow),callback:function ($$v) {_vm.popShow=$$v},expression:\"popShow\"}},[_c('div',{staticClass:\"pop-content\"},[_c('h3',{staticClass:\"pop-content-title mt-flex mt-fs-16 mt-align-center mt-justify-between mt-border-bottom-half\"},[_c('van-icon',{attrs:{\"name\":\"close\"},on:{\"click\":function($event){_vm.popShow = !_vm.popShow}}}),_c('span',[_vm._v(\"油费设置\")]),_c('span')],1),_c('div',{staticClass:\"set-area\"},[_c('h4',[_vm._v(\"\\n          油价\\n        \")]),_c('div',_vm._l((_vm.gasConfig),function(gas,index){return _c('div',{key:index,class:{\n              'gas-selected': _vm.gasPrice === gas.amount\n            },on:{\"click\":function($event){_vm.gasPrice = gas.amount}}},[_c('input',{attrs:{\"disabled\":gas.disabled},domProps:{\"value\":gas.amount?gas.amount+'Gwei':''},on:{\"change\":_vm.handleGasChange}}),_c('p',[_vm._v(_vm._s(gas.tip))])])}))]),_c('div',{staticClass:\"set-area mt-border-bottom-half\"},[_c('h4',[_vm._v(\"\\n          数量上限 \"),_c('span',{staticClass:\"mt-fs-12 mt-font-secondary\"},[_vm._v(\"提示：为了顺利打包，请勿随意改小数量上限\")])]),_c('div',[_c('div',{staticClass:\"gas-selected mt-mb-20\"},[_c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.gasLimit),expression:\"gasLimit\"}],domProps:{\"value\":(_vm.gasLimit)},on:{\"change\":_vm.handleAmountChange,\"input\":function($event){if($event.target.composing){ return; }_vm.gasLimit=$event.target.value}}})])])]),_c('div',{staticClass:\"state-area\"},[_c('p',[_vm._v(\"\\n          \"+_vm._s(_vm.ethAmount)+\" eth ≈ ￥\"+_vm._s(_vm.price)+\"\\n        \")]),_c('p',{staticClass:\"mt-font-secondary mt-fs-12\"},[_vm._v(\"\\n          Gas (\"+_vm._s(_vm.gasLimit)+\")*Gas Price(\"+_vm._s(_vm.gasPrice)+\" gwei)\\n        \")])]),_c('van-button',{staticClass:\"next-button\",on:{\"click\":_vm.handleNextClick}},[_vm._v(\"\\n        下一步\\n      \")])],1)])],1)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"hint-area mt-fs-12\"},[_c('h6',[_vm._v(\"\\n        请确保币种授权种数量不少于要转账的数量\\n      \")]),_c('ol',[_c('li',[_vm._v(\"\\n          1.到EXCEL表格里复制要转账的地址\\n        \")]),_c('li',[_vm._v(\"\\n          2.点击“地址”里的批量粘贴，需转出的地址会自动生成\\n        \")]),_c('li',[_vm._v(\"\\n          3.回到EXCLE表格里，复制地址要转出的数量\\n        \")]),_c('li',[_vm._v(\"\\n          4.点击“数量”里的批量粘贴，需转出的数量会自动生成\\n        \")]),_c('li',[_vm._v(\"\\n          粘贴完成后，请仔细核对转账地址和相应数量】\\n        \")])])])}]\n\nexport { render, staticRenderFns }","<template>\n  <div class=\"\">\n    <van-nav-bar\n      title=\"合约制定\"\n      left-text=\"返回\"\n      left-arrow\n      @click-left=\"onClickLeft\"\n    />\n    <div class=\"contract-wrapper\">\n      <div class=\"tip-area  mt-fs-14 mt-font-primary\">\n        请自我检查输入的地址是否正确。Mwallet只负责提供技术支持。\n      </div>\n      <!-- entryarea -->\n      <div>\n        <div  class=\"clipboard-content mt-font-secondary mt-mb-20\">\n          <div class=\"van-hairline--surround \">\n            <textarea type=\"textarea\" placeholder=\"长按批量粘贴地址\" v-if=\"!startWitnSingle&&!originAddress\"   class=\"mt-flex-1\" @blur=\"e => handleTextareaBlur(e, 'originAddress')\"  :maxlength=\"5000\"></textarea>\n            <div @click=\"handleDeleteAll\" v-else>全部删除</div>\n          </div>\n          <div class=\"van-hairline--surround \">\n            <textarea type=\"textarea\"  placeholder=\"长按批量粘贴数量\"  v-if=\"!startWitnSingle&&!originAmount\"   class=\"mt-flex-1\" @blur=\"e => handleTextareaBlur(e, 'originAmount')\" :maxlength=\"5000\"></textarea>\n            <div @click=\"handleDeleteAllAmount\" v-else>删除数量</div>\n          </div>\n        </div>\n      </div>\n      <!-- list-data -->\n      <div v-if=\"infoData.length>0\">\n        <div class=\"  data-item-header van-hairline--bottom  mt-fs-14\">\n          <div></div>\n          <div>地址</div>\n          <div>数量({{contractData.symbol}})</div>\n        </div>\n        <div v-for=\"(item,index) in infoData\"\n          :key=\"index\"\n          class=\"data-item van-hairline--bottom mt-fs-14\"\n          v-if=\"currentActive !== index\"\n          @click=\"currentActive = index\"\n        >\n          <div>{{index+1}}</div>\n          <div>{{item.address}}</div>\n          <div class=\"van-hairline--surround \">{{item.amount}}</div>\n        </div>\n        <div v-else class=\"data-item van-hairline--bottom mt-fs-14\">\n          <div>{{index+1}}</div>\n          <van-field class=\"single-address\" @blur=\"currentActive= null\" v-model=\"item.address\" ></van-field>\n          <van-field type=\"number\" @blur=\"currentActive= null\"  v-model=\"item.amount\" ></van-field>\n        </div>\n      </div>\n      <!-- add btn -->\n      <div class=\"add-btn-area mt-text-center mt-flex mt-align-center mt-justify-around\">\n        <div @click=\"handleAddSingle\" class=\" add-btn van-hairline--surround\">\n          <span class=\"mt-fs-24 \">+</span>&nbsp;增加地址\n        </div>\n      </div>\n      <!-- tips -->\n      <div class=\"hint-area mt-fs-12\">\n        <h6>\n          请确保币种授权种数量不少于要转账的数量\n        </h6>\n        <ol>\n          <li>\n            1.到EXCEL表格里复制要转账的地址\n          </li>\n          <li>\n            2.点击“地址”里的批量粘贴，需转出的地址会自动生成\n          </li>\n          <li>\n            3.回到EXCLE表格里，复制地址要转出的数量\n          <li>\n            4.点击“数量”里的批量粘贴，需转出的数量会自动生成\n          </li>\n          <li>\n            粘贴完成后，请仔细核对转账地址和相应数量】\n          </li>\n        </ol>\n      </div>\n    </div>\n\n    \n    <div class=\"bottom-bar\">\n      <div class=\"n\">\n        <span>地址数:</span> \n        <span>\n          {{infoData.length}},\n        </span>\n        <span>\n         {{contractData.symbol}} 总数: {{total_amount}} \n        </span>\n      </div>\n      <div  @click=\"handleTransfer\">\n        转账\n      </div>\n    </div>\n\n    <!-- popup -->\n    <van-popup position=\"bottom\" v-model=\"popShow\">\n      <div class=\"pop-content\">\n        <h3 class=\"pop-content-title mt-flex mt-fs-16 mt-align-center mt-justify-between mt-border-bottom-half\">\n          <van-icon @click=\"popShow = !popShow\" name=\"close\"></van-icon>  \n          <span>油费设置</span>\n          <span></span>\n        </h3>\n        <!-- gas-area -->\n        <div class=\"set-area\">\n          <h4>\n            油价\n          </h4>\n          <div>\n            <div \n              v-for=\"(gas,index) in gasConfig\"\n              :key=\"index\"\n              :class=\"{\n                'gas-selected': gasPrice === gas.amount\n              }\"\n              @click=\"gasPrice = gas.amount\"\n              >\n              <input :disabled=\"gas.disabled\"   @change=\"handleGasChange\"  :value=\"gas.amount?gas.amount+'Gwei':''\" />\n              <p>{{gas.tip}}</p>\n            </div>\n          </div>\n        </div>\n        <!-- amount-area -->\n        <div class=\"set-area mt-border-bottom-half\">\n          <h4>\n            数量上限 <span class=\"mt-fs-12 mt-font-secondary\">提示：为了顺利打包，请勿随意改小数量上限</span>\n          </h4>\n          <div>\n            <div \n              class='gas-selected mt-mb-20'\n              >\n              <input @change=\"handleAmountChange\"  v-model=\"gasLimit\" />\n            </div>\n          </div>\n        </div>\n        <!-- state-area -->\n        <div class='state-area'>\n          <p>\n            {{ethAmount}} eth ≈ ￥{{price}}\n          </p>\n          <p class=\"mt-font-secondary mt-fs-12\">\n            Gas ({{gasLimit}})*Gas Price({{gasPrice}} gwei)\n          </p>\n        </div>\n        <!-- next-button -->\n        <van-button @click=\"handleNextClick\" class='next-button'>\n          下一步\n        </van-button> \n      </div>\n    </van-popup>\n  </div>\n</template>\n\n<script>\nimport { GetSessionObj } from \"@/utils/utils\";\nimport { walletGasinfo, currencyPrices } from \"@/service/api\";\n\nimport { BigNumber } from \"bignumber.js\";\nBigNumber.set({ DECIMAL_PLACES: 50 });\nexport default {\n  name: \"contract\",\n  data() {\n    return {\n      originAddress: \"\",\n      originAmount: \"\",\n      addressInput: false,\n      amountInput: false,\n      singleAddress: \"\",\n      singleAmount: \"\",\n      addDataSingle: false,\n      popShow: false,\n      // currentActive\n      currentActive: null,\n      numberShow: false,\n\n      // new\n      // infoData\n      infoData:[],\n      startWitnSingle: false,\n\n      gasConfig: [\n        {\n          amount: 4,\n          tip: \"慢\",\n          disabled: true,\n          key: \"min\"\n        },\n        {\n          amount: 15,\n          tip: \"中等\",\n          disabled: true,\n          key: \"mid\"\n        },\n        {\n          amount: 60,\n          tip: \"快\",\n          disabled: true,\n          key: \"max\"\n        },\n        {\n          amount: null,\n          tip: \"自定义\",\n          disabled: false\n        }\n      ],\n      gasPrice: 4,\n      gasLimit: 0,\n      ethAmount: 0,\n      ethPrice: 0,\n      price: 0,\n\n      // block\n      MethodID: \"0xad8733ca\",\n      contractData: {},\n      CommonParams:\n        \"0000000000000000000000000000000000000000000000000000000000000060\",\n      Decimals: \"18\",\n      delegate: \"0xa0342E0A9FE0b5178208115E7712762c88c228e0\",\n\n      // \n      content:''\n    };\n  },\n  computed: {\n    // addresses() {\n    //   return this.originAddress === \"\" ? [] : this.originAddress.split(\"\\n\");\n    // },\n    // amount() {\n    //   return this.originAmount === \"\" ? [] : this.originAmount.split(\"\\n\");\n    // },\n    total_amount() {\n      let total = 0;\n      let arr = this.infoData;\n      arr.forEach(item => {\n        total += item.amount * 1;\n      });\n      return total;\n    },\n    // content() {\n    //   let str = \"\";\n    //   let infoData = this.infoData\n    //   // if (addresses.length !== amount.length) {\n    //   //   return \"地址数量与打币数量不一致，请检查！\";\n    //   // }\n    //   if (this.originAddress.length === 0) {\n    //     return \"请输入地址\";\n    //   }\n    //   if (this.originAmount.length === 0) {\n    //     return \"请输入地址\";\n    //   }\n      \n    //   str +=\n    //     this.MethodID +\n    //     this.formatString264(this.contractData.contract.replace(\"0x\", \"\")) +\n    //     this.CommonParams;\n    //   let code = ((addresses.length + 4) * 32).toString(16);\n    //   str +=\n    //     this.formatString264(code) +\n    //     this.formatString264(addresses.length.toString(16));\n    //   addresses.forEach(address => {\n    //     address = address.replace(\"0x\", \"\");\n    //     str += this.formatString264(address);\n    //   });\n    //   str += this.formatString264(addresses.length.toString(16));\n    //   amount.forEach(item => {\n    //     let newItem = new BigNumber(item);\n    //     newItem = newItem.times(10 ** this.Decimals).toString(16);\n    //     str += this.formatString264(newItem);\n    //   });\n    //   return str;\n    // }\n  },\n  watch: {\n    // new\n    originAddress(val) {\n      // 判断是否清空数据\n      if(val === '') {\n        this.infoData = []\n        return\n      }\n      let newArr =  val === \"\" ? [] : val.split(\"\\n\");\n      newArr.forEach((item, index) => {\n        this.infoData[index]?this.infoData[index].address = item:this.infoData[index] = { address: item }\n      })\n    },\n    originAmount(val) {\n      // 判断清空amount\n      if(val === '') {\n        this.infoData.forEach((item, index) => {\n          delete item.amount\n        })\n        return\n      }\n      let newArr =  val === \"\" ? [] : val.split(\"\\n\");\n      newArr.forEach((item, index) => {\n        this.infoData[index]?this.infoData[index].amount = item:this.infoData[index] = { amount: item }\n      })\n    },\n\n    // old\n    gasLimit(val) {\n      let newGaslimit = new BigNumber(val);\n      let newGasPrice = new BigNumber(this.gasPrice);\n      this.ethAmount = newGasPrice\n        .times(newGaslimit)\n        .div(10 ** 9)\n        .toString();\n    },\n    gasPrice(val) {\n      let newGasPrice = new BigNumber(val);\n      let newGaslimit = new BigNumber(this.gasLimit);\n      this.ethAmount = newGasPrice\n        .times(newGaslimit)\n        .div(10 ** 9)\n        .toString();\n    },\n    infoData(val) {\n      this.gasLimit = val.length * 50000;\n    },\n    ethPrice(val) {\n      let newPrice = new BigNumber(val);\n      let newAmount = new BigNumber(this.ethAmount);\n      this.price = newPrice.times(newAmount).toString();\n    },\n    ethAmount(val) {\n      let newPrice = new BigNumber(this.ethPrice);\n      let newAmount = new BigNumber(val);\n      this.price = newPrice\n        .times(newAmount)\n        .toFixed(2)\n        .toString();\n    }\n  },\n  mounted() {\n    this.contractData = GetSessionObj(\"contract\") || {};\n    this.initPossiableFunc();\n    walletGasinfo().then(res => {\n      let data = res.data;\n      if (data.code === 0) {\n        this.gasConfig = this.gasConfig.map((item, index) => {\n          if (item.key) {\n            let amount = new BigNumber(data.data[item.key]);\n            item.amount = amount.div(10 ** 9).toString();\n            if (index === 0) {\n              this.gasPrice = item.amount;\n            }\n          }\n          return item;\n        });\n      }\n    });\n    currencyPrices({\n      contracts: \"0x0\"\n    }).then(res => {\n      this.ethPrice = res.data.data[0].price;\n    });\n  },\n  methods: {\n    handleTextareaBlur(e, key) {\n      this[key] = e.target.value\n    },\n    handleAddSingle() {\n      if (this.infoData.length === 0) {\n        this.startWitnSingle = true\n      }\n      this.infoData.push({\n        single: true,\n        address: '',\n        amount: null\n      })\n      this.currentActive = this.infoData.length-1\n      setTimeout(()=>{\n        document.querySelector('.single-address input').focus()\n      },300)\n    },\n    handleDeleteAll() {\n      this.originAddress=''\n      this.originAmount=''\n      this.infoData = []\n      this.startWitnSingle=false\n    },\n    handleDeleteAllAmount() {\n      this.infoData.forEach((item) => {\n        item.amount = null\n      })\n    },\n    examineData() {\n      let str = \"\";\n      let that = this;\n      let infoData = this.infoData\n      let valid_status = true\n      // 判断长度是否存在数据\n      if (infoData.length == 0) {\n        valid_status = false\n        return {\n          valid_status: valid_status,\n          message: '转账地址和数量不能为空，请重新输入'\n        }\n      }\n      // 判断是否各个数据均含有所需数据\n      infoData.forEach((item,index) => {\n        // 是否含有该值\n        if(!(item.hasOwnProperty('address')&&item.hasOwnProperty('amount'))){\n          item.dis_qualified = true\n          valid_status = false\n          return\n        }\n        \n        // checkout addres valid\n        if(!(that.$web3.utils.isHex(item.address)&&that.$web3.utils.isAddress(item.address))) {\n          item.dis_qualified = true\n          valid_status = false\n          return\n        }\n        if(item.amount*1 === NaN) {\n          item.dis_qualified = true\n          valid_status = false\n          return\n        }\n      })\n      if(!valid_status) {\n        return {\n          valid_status: valid_status,\n          message: '转账地址和数量不合格，请检查！'\n        }\n      }\n      // 必要信息\n      str +=\n        that.MethodID +\n        that.formatString264(that.contractData.contract.replace(\"0x\", \"\")) +\n        that.CommonParams;\n      let code = ((infoData.length + 4) * 32).toString(16);\n      str +=\n        that.formatString264(code) +\n        that.formatString264(infoData.length.toString(16));\n      // 输入信息\n      let addressStr ='',amountStr='';\n      infoData.forEach((item) => {\n        // address\n        let address = item.address.replace(\"0x\", \"\");\n        addressStr += that.formatString264(address);\n        // amount\n        let amount = new BigNumber(item.amount);\n        amount = amount.times(10 ** that.Decimals).toString(16);\n        amountStr += that.formatString264(amount);\n      })\n      str+= addressStr+this.formatString264(infoData.length.toString(16))+amountStr\n      return {\n          valid_status: valid_status,\n          data: str\n        }\n    },\n    // \n    formatString264(str) {\n      if (!str) {\n        return \"wrong_code\";\n      }\n      let newStr = str.toString();\n      if (newStr.length == 64) {\n        return newStr;\n      } else if (newStr.length < 64) {\n        let length = newStr.length;\n        for (let i = 0; i < 64 - length; i++) {\n          newStr = \"0\" + newStr;\n        }\n        return newStr;\n      } else {\n        return newStr;\n      }\n    },\n    handleTransfer() {\n      let res = this.examineData()\n      if (!res.valid_status) {\n        this.$dialog.alert({\n          message: res.message\n        });\n      } else {\n        this.content = res.data\n        this.popShow = true;\n      }\n    },\n    handleGasChange(e) {\n      this.gasConfig[3].amount = e.target.value * 1;\n      this.gasPrice = e.target.value * 1;\n    },\n    handleAmountChange() {\n      this.gasLimit = e.target.value * 1;\n    },\n    // 改变既有莫条数据\n    onClickLeft() {\n      console.log(\"top-left-click\");\n      this.$router.back();\n    },\n    handleNextClick() {\n      let newgasPrice = new BigNumber(this.gasPrice);\n      newgasPrice = newgasPrice.times(10 ** 9).toString();\n      let tx = {\n        nonce: 0,\n        gasPrice: newgasPrice,\n        gasLimit: this.gasLimit,\n        to: this.delegate, //收款地址或者合约地址\n        value: 0, //转账的 ETH 数量\n        data: this.content\n      };\n      console.log(tx);\n      window.Ygritte && window.Ygritte.sendTransaction(tx, \"MTsendTransaction\");\n    },\n    initPossiableFunc() {\n      let that = this;\n      window.MTsendTransaction = function(res) {\n        console.log(res, \"MTsendTransaction\");\n        that.$router.back();\n        // that.Allowance = res\n      };\n      // window.fetchAllowance = fetchAllowance\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n// @import '../../../assets/style/new-common.scss';\n.contract-wrapper {\n  padding: 15px 0;\n  text-align: left;\n}\n.tip-area{\n  padding: 12px 15px;\n  margin-bottom: 12px;\n  font-size: 12px;\n  background-color: rgb(246,246,246);\n}\n\n.clipboard-content {\n  display: flex;\n  justify-content: space-between;\n  height: 64px;\n  margin: 0 15px;\n  > div {\n    &:nth-child(1){\n      flex-basis: 190px;\n    }\n    &:nth-child(2){\n      flex-basis: 137px;\n    }\n    border-radius: 2px;\n    display: flex;\n    justify-content: space-around;\n    align-items: center;\n    padding: 12px;\n\n    textarea {\n      color: rgb(153, 153, 153);\n      width: 100%;\n      height:100%;\n    }\n    textarea::-webkit-input-placeholder {\n    color: rgb(153, 153, 153);\n    }\n     textarea:-moz-placeholder {\n        color:rgb(153, 153, 153);\n    }\n     textarea::-moz-placeholder {\n        color:rgb(153, 153, 153);\n    }\n     textarea:-ms-input-placeholder {\n        color:rgb(153, 153, 153);\n    }\n    button {\n      height: 28px;\n      line-height: 28px;\n      font-size: 12px;\n      color: #fff;\n      background-color: rgb(97, 136, 242);\n    }\n  }\n}\n// data\n.data-item-header{\n  display: flex;\n  justify-content: space-between;\n   font-size: 12px;\n   padding: 0 15px;\n  > div {\n    border-radius: 1px;\n    align-items: center;\n    display: flex;\n    padding: 8px;\n    &:nth-child(1) {\n      align-items: center;\n      display: flex;\n      flex-basis: 14px;\n    }\n    &:nth-child(2) {\n      flex-basis: 207px;\n      font-size: 12px;\n      word-break: break-all;\n    }\n    &:nth-child(3) {\n      flex-basis: 114px;\n      justify-content: flex-end;\n    }\n  }\n}\n.data-item {\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  height: 56px;\n  padding: 0 15px;\n  font-size: 12px;\n  > div {\n    border-radius: 1px;\n    align-items: center;\n    display: flex;\n     &:nth-child(1) {\n      align-items: center;\n      display: flex;\n      flex-basis: 14px;\n      margin-right:8px;\n    }\n    &:nth-child(2) {\n      flex-basis: 195px;\n      word-break: break-all;\n      margin-right:12px;\n      &.van-cell{\n        height:33px;\n        padding:0 ;\n        &:after{\n          left: 0\n        }\n      }\n    }\n    &:nth-child(3) {\n      flex-basis: 88px;\n      width: 88px;\n      height: 33px;\n      background-color: #fff;\n      &.van-cell{\n        height:33px;\n      }\n    }\n    &:nth-child(4) {\n      flex-basis: 114px;\n      width: 27px;\n      height: 33px;\n      background-color: #fff;\n      &.van-cell{\n        height:33px;\n      }\n    }\n  }\n  &:nth-child(odd) {\n    background-color: rgb(246, 246, 246);\n  }\n}\n.add-btn-area {\n  color: rgb(153, 153, 153);\n  height: 36px;\n  font-size: 14px;\n  margin-top: 40px;\n  .add-btn{\n    width: 116px;\n    height:36px;\n    line-height: 36px;\n    text-align: center;\n  }\n}\n.hint-area {\n  line-height: 27px;\n  margin-top: 20px;\n  padding: 0 15px;\n  h6 {\n    color: rgb(102, 102, 102);\n  }\n  li {\n    color: rgb(124, 124, 124);\n  }\n}\n//  bottom bar\n.bottom-bar {\n  position: fixed;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  color: #fff;\n  > div {\n    padding: 0 15px;\n    &:nth-child(1) {\n      height: 40px;\n      line-height: 40px;\n      font-size: 14px;\n      background-color: rgba(34, 34, 34, 0.95);\n    }\n    &:nth-child(2) {\n      height: 50px;\n      line-height: 50px;\n      font-size: 18px;\n      background-color: rgb(97, 136, 242);\n      text-align: center;\n    }\n  }\n}\n// popup content\n.van-popup--bottom {\n  border-radius: 8px 8px 0 0;\n}\n.pop-content {\n  height: 493px;\n  padding: 0px 15px;\n  .pop-content-title {\n    line-height: 54px;\n  }\n}\n.set-area {\n  h4 {\n    font-size: 14px;\n    line-height: 44px;\n  }\n  > div {\n    display: flex;\n    justify-content: space-between;\n    > div {\n      font-size: 12px;\n      text-align: center;\n      input {\n        width: 76px;\n        height: 24px;\n        background-color: transparent;\n        border: 1px solid rgb(213, 213, 213);\n        text-align: center;\n        border-radius: 2px;\n      }\n      p {\n        height: 33px;\n        line-height: 25px;\n      }\n    }\n  }\n  .gas-selected {\n    color: rgb(97, 136, 242);\n    input {\n      color: rgb(97, 136, 242);\n      border-color: rgb(97, 136, 242);\n    }\n  }\n}\n.state-area {\n  text-align: right;\n  padding: 12px 0;\n}\n.next-button {\n  width: 100%;\n  height: 48px;\n  border-radius: 4px;\n  background-color: rgb(97, 136, 242);\n  font-size: 18px;\n  color: #fff;\n  margin-top: 120px;\n}\n</style>\n","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./contract.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./contract.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./contract.vue?vue&type=template&id=3c77ec74&scoped=true&\"\nimport script from \"./contract.vue?vue&type=script&lang=js&\"\nexport * from \"./contract.vue?vue&type=script&lang=js&\"\nimport style0 from \"./contract.vue?vue&type=style&index=0&id=3c77ec74&lang=scss&scoped=true&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"3c77ec74\",\n  null\n  \n)\n\ncomponent.options.__file = \"contract.vue\"\nexport default component.exports","import mod from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js!../../../node_modules/css-loader/index.js??ref--8-oneOf-1-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/lib/index.js??ref--8-oneOf-1-2!../../../node_modules/sass-loader/lib/loader.js??ref--8-oneOf-1-3!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./contract.vue?vue&type=style&index=0&id=3c77ec74&lang=scss&scoped=true&\"; export default mod; export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js!../../../node_modules/css-loader/index.js??ref--8-oneOf-1-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/lib/index.js??ref--8-oneOf-1-2!../../../node_modules/sass-loader/lib/loader.js??ref--8-oneOf-1-3!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./contract.vue?vue&type=style&index=0&id=3c77ec74&lang=scss&scoped=true&\"",";(function (globalObject) {\r\n  'use strict';\r\n\r\n/*\r\n *      bignumber.js v7.2.1\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2018 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\n  var BigNumber,\r\n    isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n\r\n    mathceil = Math.ceil,\r\n    mathfloor = Math.floor,\r\n\r\n    bignumberError = '[BigNumber Error] ',\r\n    tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n    BASE = 1e14,\r\n    LOG_BASE = 14,\r\n    MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n    SQRT_BASE = 1e7,\r\n\r\n    // EDITABLE\r\n    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n    // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n    MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n  /*\r\n   * Create and return a BigNumber constructor.\r\n   */\r\n  function clone(configObject) {\r\n    var div, convertBase, parseNumeric,\r\n      P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n      ONE = new BigNumber(1),\r\n\r\n\r\n      //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n      // The default values below must be integers within the inclusive ranges stated.\r\n      // The values can also be changed at run-time using BigNumber.set.\r\n\r\n      // The maximum number of decimal places for operations involving division.\r\n      DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n      // The rounding mode used when rounding to the above decimal places, and when using\r\n      // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n      // UP         0 Away from zero.\r\n      // DOWN       1 Towards zero.\r\n      // CEIL       2 Towards +Infinity.\r\n      // FLOOR      3 Towards -Infinity.\r\n      // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n      // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n      // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n      // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n      // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n      ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n      // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n      // The exponent value at and beneath which toString returns exponential notation.\r\n      // Number type: -7\r\n      TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n      // The exponent value at and above which toString returns exponential notation.\r\n      // Number type: 21\r\n      TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n      // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n      // The minimum exponent value, beneath which underflow to zero occurs.\r\n      // Number type: -324  (5e-324)\r\n      MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n      // The maximum exponent value, above which overflow to Infinity occurs.\r\n      // Number type:  308  (1.7976931348623157e+308)\r\n      // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n      MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n      // Whether to use cryptographically-secure random number generation, if available.\r\n      CRYPTO = false,                          // true or false\r\n\r\n      // The modulo mode used when calculating the modulus: a mod n.\r\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n      // The remainder (r) is calculated as: r = a - n * q.\r\n      //\r\n      // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n      // DOWN      1 The remainder has the same sign as the dividend.\r\n      //             This modulo mode is commonly known as 'truncated division' and is\r\n      //             equivalent to (a % n) in JavaScript.\r\n      // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n      // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n      // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n      //             The remainder is always positive.\r\n      //\r\n      // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n      // modes are commonly used for the modulus operation.\r\n      // Although the other rounding modes can also be used, they may not give useful results.\r\n      MODULO_MODE = 1,                         // 0 to 9\r\n\r\n      // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n      // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n      POW_PRECISION = 0,                    // 0 to MAX\r\n\r\n      // The format specification used by the BigNumber.prototype.toFormat method.\r\n      FORMAT = {\r\n        decimalSeparator: '.',\r\n        groupSeparator: ',',\r\n        groupSize: 3,\r\n        secondaryGroupSize: 0,\r\n        fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n        fractionGroupSize: 0\r\n      },\r\n\r\n      // The alphabet used for base conversion.\r\n      // It must be at least 2 characters long, with no '.' or repeated character.\r\n      // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n      ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz';\r\n\r\n\r\n    //------------------------------------------------------------------------------------------\r\n\r\n\r\n    // CONSTRUCTOR\r\n\r\n\r\n    /*\r\n     * The BigNumber constructor and exported function.\r\n     * Create and return a new instance of a BigNumber object.\r\n     *\r\n     * n {number|string|BigNumber} A numeric value.\r\n     * [b] {number} The base of n. Integer, 2 to ALPHABET.length inclusive.\r\n     */\r\n    function BigNumber(n, b) {\r\n      var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n        x = this;\r\n\r\n      // Enable constructor usage without new.\r\n      if (!(x instanceof BigNumber)) {\r\n\r\n        // Don't throw on constructor call without new (#81).\r\n        // '[BigNumber Error] Constructor call without new: {n}'\r\n        //throw Error(bignumberError + ' Constructor call without new: ' + n);\r\n        return new BigNumber(n, b);\r\n      }\r\n\r\n      if (b == null) {\r\n\r\n        // Duplicate.\r\n        if (n instanceof BigNumber) {\r\n          x.s = n.s;\r\n          x.e = n.e;\r\n          x.c = (n = n.c) ? n.slice() : n;\r\n          return;\r\n        }\r\n\r\n        isNum = typeof n == 'number';\r\n\r\n        if (isNum && n * 0 == 0) {\r\n\r\n          // Use `1 / n` to handle minus zero also.\r\n          x.s = 1 / n < 0 ? (n = -n, -1) : 1;\r\n\r\n          // Faster path for integers.\r\n          if (n === ~~n) {\r\n            for (e = 0, i = n; i >= 10; i /= 10, e++);\r\n            x.e = e;\r\n            x.c = [n];\r\n            return;\r\n          }\r\n\r\n          str = n + '';\r\n        } else {\r\n          if (!isNumeric.test(str = n + '')) return parseNumeric(x, str, isNum);\r\n          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n        // Exponential form?\r\n        if ((i = str.search(/e/i)) > 0) {\r\n\r\n          // Determine exponent.\r\n          if (e < 0) e = i;\r\n          e += +str.slice(i + 1);\r\n          str = str.substring(0, i);\r\n        } else if (e < 0) {\r\n\r\n          // Integer.\r\n          e = str.length;\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n        str = n + '';\r\n\r\n        // Allow exponential notation to be used with base 10 argument, while\r\n        // also rounding to DECIMAL_PLACES as with other bases.\r\n        if (b == 10) {\r\n          x = new BigNumber(n instanceof BigNumber ? n : str);\r\n          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n        }\r\n\r\n        isNum = typeof n == 'number';\r\n\r\n        if (isNum) {\r\n\r\n          // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n          if (n * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n          x.s = 1 / n < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n          // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n          if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n            throw Error\r\n             (tooManyDigits + n);\r\n          }\r\n\r\n          // Prevent later check for length on converted number.\r\n          isNum = false;\r\n        } else {\r\n          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        alphabet = ALPHABET.slice(0, b);\r\n        e = i = 0;\r\n\r\n        // Check that str is a valid base b number.\r\n        // Don't use RegExp so alphabet can contain special characters.\r\n        for (len = str.length; i < len; i++) {\r\n          if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n            if (c == '.') {\r\n\r\n              // If '.' is not the first character and it has not be found before.\r\n              if (i > e) {\r\n                e = len;\r\n                continue;\r\n              }\r\n            } else if (!caseChanged) {\r\n\r\n              // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n              if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                  str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n                caseChanged = true;\r\n                i = -1;\r\n                e = 0;\r\n                continue;\r\n              }\r\n            }\r\n\r\n            return parseNumeric(x, n + '', isNum, b);\r\n          }\r\n        }\r\n\r\n        str = convertBase(str, b, 10, x.s);\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n        else e = str.length;\r\n      }\r\n\r\n      // Determine leading zeros.\r\n      for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n      // Determine trailing zeros.\r\n      for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n      str = str.slice(i, ++len);\r\n\r\n      if (str) {\r\n        len -= i;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (isNum && BigNumber.DEBUG &&\r\n          len > 15 && (n > MAX_SAFE_INTEGER || n !== mathfloor(n))) {\r\n            throw Error\r\n             (tooManyDigits + (x.s * n));\r\n        }\r\n\r\n        e = e - i - 1;\r\n\r\n         // Overflow?\r\n        if (e > MAX_EXP) {\r\n\r\n          // Infinity.\r\n          x.c = x.e = null;\r\n\r\n        // Underflow?\r\n        } else if (e < MIN_EXP) {\r\n\r\n          // Zero.\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = e;\r\n          x.c = [];\r\n\r\n          // Transform base\r\n\r\n          // e is the base 10 exponent.\r\n          // i is where to slice str to get the first element of the coefficient array.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (e < 0) i += LOG_BASE;\r\n\r\n          if (i < len) {\r\n            if (i) x.c.push(+str.slice(0, i));\r\n\r\n            for (len -= LOG_BASE; i < len;) {\r\n              x.c.push(+str.slice(i, i += LOG_BASE));\r\n            }\r\n\r\n            str = str.slice(i);\r\n            i = LOG_BASE - str.length;\r\n          } else {\r\n            i -= len;\r\n          }\r\n\r\n          for (; i--; str += '0');\r\n          x.c.push(+str);\r\n        }\r\n      } else {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n\r\n    // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n    BigNumber.clone = clone;\r\n\r\n    BigNumber.ROUND_UP = 0;\r\n    BigNumber.ROUND_DOWN = 1;\r\n    BigNumber.ROUND_CEIL = 2;\r\n    BigNumber.ROUND_FLOOR = 3;\r\n    BigNumber.ROUND_HALF_UP = 4;\r\n    BigNumber.ROUND_HALF_DOWN = 5;\r\n    BigNumber.ROUND_HALF_EVEN = 6;\r\n    BigNumber.ROUND_HALF_CEIL = 7;\r\n    BigNumber.ROUND_HALF_FLOOR = 8;\r\n    BigNumber.EUCLID = 9;\r\n\r\n\r\n    /*\r\n     * Configure infrequently-changing library-wide settings.\r\n     *\r\n     * Accept an object with the following optional properties (if the value of a property is\r\n     * a number, it must be an integer within the inclusive range stated):\r\n     *\r\n     *   DECIMAL_PLACES   {number}           0 to MAX\r\n     *   ROUNDING_MODE    {number}           0 to 8\r\n     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n     *   CRYPTO           {boolean}          true or false\r\n     *   MODULO_MODE      {number}           0 to 9\r\n     *   POW_PRECISION       {number}           0 to MAX\r\n     *   ALPHABET         {string}           A string of two or more unique characters which does\r\n     *                                       not contain '.'.\r\n     *   FORMAT           {object}           An object with some of the following properties:\r\n     *      decimalSeparator       {string}\r\n     *      groupSeparator         {string}\r\n     *      groupSize              {number}\r\n     *      secondaryGroupSize     {number}\r\n     *      fractionGroupSeparator {string}\r\n     *      fractionGroupSize      {number}\r\n     *\r\n     * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n     *\r\n     * E.g.\r\n     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n     *\r\n     * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n     *\r\n     * Return an object with the properties current values.\r\n     */\r\n    BigNumber.config = BigNumber.set = function (obj) {\r\n      var p, v;\r\n\r\n      if (obj != null) {\r\n\r\n        if (typeof obj == 'object') {\r\n\r\n          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            DECIMAL_PLACES = v;\r\n          }\r\n\r\n          // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 8, p);\r\n            ROUNDING_MODE = v;\r\n          }\r\n\r\n          // EXPONENTIAL_AT {number|number[]}\r\n          // Integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n            v = obj[p];\r\n            if (isArray(v)) {\r\n              intCheck(v[0], -MAX, 0, p);\r\n              intCheck(v[1], 0, MAX, p);\r\n              TO_EXP_NEG = v[0];\r\n              TO_EXP_POS = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n            }\r\n          }\r\n\r\n          // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n          if (obj.hasOwnProperty(p = 'RANGE')) {\r\n            v = obj[p];\r\n            if (isArray(v)) {\r\n              intCheck(v[0], -MAX, -1, p);\r\n              intCheck(v[1], 1, MAX, p);\r\n              MIN_EXP = v[0];\r\n              MAX_EXP = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              if (v) {\r\n                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n              } else {\r\n                throw Error\r\n                 (bignumberError + p + ' cannot be zero: ' + v);\r\n              }\r\n            }\r\n          }\r\n\r\n          // CRYPTO {boolean} true or false.\r\n          // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n          // '[BigNumber Error] crypto unavailable'\r\n          if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n            v = obj[p];\r\n            if (v === !!v) {\r\n              if (v) {\r\n                if (typeof crypto != 'undefined' && crypto &&\r\n                 (crypto.getRandomValues || crypto.randomBytes)) {\r\n                  CRYPTO = v;\r\n                } else {\r\n                  CRYPTO = !v;\r\n                  throw Error\r\n                   (bignumberError + 'crypto unavailable');\r\n                }\r\n              } else {\r\n                CRYPTO = v;\r\n              }\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' not true or false: ' + v);\r\n            }\r\n          }\r\n\r\n          // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 9, p);\r\n            MODULO_MODE = v;\r\n          }\r\n\r\n          // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            POW_PRECISION = v;\r\n          }\r\n\r\n          // FORMAT {object}\r\n          // '[BigNumber Error] FORMAT not an object: {v}'\r\n          if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n            v = obj[p];\r\n            if (typeof v == 'object') FORMAT = v;\r\n            else throw Error\r\n             (bignumberError + p + ' not an object: ' + v);\r\n          }\r\n\r\n          // ALPHABET {string}\r\n          // '[BigNumber Error] ALPHABET invalid: {v}'\r\n          if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n            v = obj[p];\r\n\r\n            // Disallow if only one character, or contains '.' or a repeated character.\r\n            if (typeof v == 'string' && !/^.$|\\.|(.).*\\1/.test(v)) {\r\n              ALPHABET = v;\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' invalid: ' + v);\r\n            }\r\n          }\r\n\r\n        } else {\r\n\r\n          // '[BigNumber Error] Object expected: {v}'\r\n          throw Error\r\n           (bignumberError + 'Object expected: ' + obj);\r\n        }\r\n      }\r\n\r\n      return {\r\n        DECIMAL_PLACES: DECIMAL_PLACES,\r\n        ROUNDING_MODE: ROUNDING_MODE,\r\n        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n        RANGE: [MIN_EXP, MAX_EXP],\r\n        CRYPTO: CRYPTO,\r\n        MODULO_MODE: MODULO_MODE,\r\n        POW_PRECISION: POW_PRECISION,\r\n        FORMAT: FORMAT,\r\n        ALPHABET: ALPHABET\r\n      };\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if v is a BigNumber instance, otherwise return false.\r\n     *\r\n     * v {any}\r\n     */\r\n    BigNumber.isBigNumber = function (v) {\r\n      return v instanceof BigNumber || v && v._isBigNumber === true || false;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the maximum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.maximum = BigNumber.max = function () {\r\n      return maxOrMin(arguments, P.lt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the minimum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.minimum = BigNumber.min = function () {\r\n      return maxOrMin(arguments, P.gt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n     * zeros are produced).\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n     * '[BigNumber Error] crypto unavailable'\r\n     */\r\n    BigNumber.random = (function () {\r\n      var pow2_53 = 0x20000000000000;\r\n\r\n      // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n      // Check if Math.random() produces more than 32 bits of randomness.\r\n      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n      var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n       ? function () { return mathfloor(Math.random() * pow2_53); }\r\n       : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n         (Math.random() * 0x800000 | 0); };\r\n\r\n      return function (dp) {\r\n        var a, b, e, k, v,\r\n          i = 0,\r\n          c = [],\r\n          rand = new BigNumber(ONE);\r\n\r\n        if (dp == null) dp = DECIMAL_PLACES;\r\n        else intCheck(dp, 0, MAX);\r\n\r\n        k = mathceil(dp / LOG_BASE);\r\n\r\n        if (CRYPTO) {\r\n\r\n          // Browsers supporting crypto.getRandomValues.\r\n          if (crypto.getRandomValues) {\r\n\r\n            a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n            for (; i < k;) {\r\n\r\n              // 53 bits:\r\n              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n              // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n              //                                     11111 11111111 11111111\r\n              // 0x20000 is 2^21.\r\n              v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n              // Rejection sampling:\r\n              // 0 <= v < 9007199254740992\r\n              // Probability that v >= 9e15, is\r\n              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n              if (v >= 9e15) {\r\n                b = crypto.getRandomValues(new Uint32Array(2));\r\n                a[i] = b[0];\r\n                a[i + 1] = b[1];\r\n              } else {\r\n\r\n                // 0 <= v <= 8999999999999999\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 2;\r\n              }\r\n            }\r\n            i = k / 2;\r\n\r\n          // Node.js supporting crypto.randomBytes.\r\n          } else if (crypto.randomBytes) {\r\n\r\n            // buffer\r\n            a = crypto.randomBytes(k *= 7);\r\n\r\n            for (; i < k;) {\r\n\r\n              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n              // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n              // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n              // 0 <= v < 9007199254740992\r\n              v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n                 (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n                 (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n              if (v >= 9e15) {\r\n                crypto.randomBytes(7).copy(a, i);\r\n              } else {\r\n\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 7;\r\n              }\r\n            }\r\n            i = k / 7;\r\n          } else {\r\n            CRYPTO = false;\r\n            throw Error\r\n             (bignumberError + 'crypto unavailable');\r\n          }\r\n        }\r\n\r\n        // Use Math.random.\r\n        if (!CRYPTO) {\r\n\r\n          for (; i < k;) {\r\n            v = random53bitInt();\r\n            if (v < 9e15) c[i++] = v % 1e14;\r\n          }\r\n        }\r\n\r\n        k = c[--i];\r\n        dp %= LOG_BASE;\r\n\r\n        // Convert trailing digits to zeros according to dp.\r\n        if (k && dp) {\r\n          v = POWS_TEN[LOG_BASE - dp];\r\n          c[i] = mathfloor(k / v) * v;\r\n        }\r\n\r\n        // Remove trailing elements which are zero.\r\n        for (; c[i] === 0; c.pop(), i--);\r\n\r\n        // Zero?\r\n        if (i < 0) {\r\n          c = [e = 0];\r\n        } else {\r\n\r\n          // Remove leading elements which are zero and adjust exponent accordingly.\r\n          for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n          // Count the digits of the first element of c to determine leading zeros, and...\r\n          for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n          // adjust the exponent accordingly.\r\n          if (i < LOG_BASE) e -= LOG_BASE - i;\r\n        }\r\n\r\n        rand.e = e;\r\n        rand.c = c;\r\n        return rand;\r\n      };\r\n    })();\r\n\r\n\r\n    // PRIVATE FUNCTIONS\r\n\r\n\r\n    // Called by BigNumber and BigNumber.prototype.toString.\r\n    convertBase = (function () {\r\n      var decimal = '0123456789';\r\n\r\n      /*\r\n       * Convert string of baseIn to an array of numbers of baseOut.\r\n       * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n       */\r\n      function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n        var j,\r\n          arr = [0],\r\n          arrL,\r\n          i = 0,\r\n          len = str.length;\r\n\r\n        for (; i < len;) {\r\n          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n          arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n          for (j = 0; j < arr.length; j++) {\r\n\r\n            if (arr[j] > baseOut - 1) {\r\n              if (arr[j + 1] == null) arr[j + 1] = 0;\r\n              arr[j + 1] += arr[j] / baseOut | 0;\r\n              arr[j] %= baseOut;\r\n            }\r\n          }\r\n        }\r\n\r\n        return arr.reverse();\r\n      }\r\n\r\n      // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n      // If the caller is toString, we are converting from base 10 to baseOut.\r\n      // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n      return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n        var alphabet, d, e, k, r, x, xc, y,\r\n          i = str.indexOf('.'),\r\n          dp = DECIMAL_PLACES,\r\n          rm = ROUNDING_MODE;\r\n\r\n        // Non-integer.\r\n        if (i >= 0) {\r\n          k = POW_PRECISION;\r\n\r\n          // Unlimited precision.\r\n          POW_PRECISION = 0;\r\n          str = str.replace('.', '');\r\n          y = new BigNumber(baseIn);\r\n          x = y.pow(str.length - i);\r\n          POW_PRECISION = k;\r\n\r\n          // Convert str as if an integer, then restore the fraction part by dividing the\r\n          // result by its base raised to a power.\r\n\r\n          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n           10, baseOut, decimal);\r\n          y.e = y.c.length;\r\n        }\r\n\r\n        // Convert the number as integer.\r\n\r\n        xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n         ? (alphabet = ALPHABET, decimal)\r\n         : (alphabet = decimal, ALPHABET));\r\n\r\n        // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n        e = k = xc.length;\r\n\r\n        // Remove trailing zeros.\r\n        for (; xc[--k] == 0; xc.pop());\r\n\r\n        // Zero?\r\n        if (!xc[0]) return alphabet.charAt(0);\r\n\r\n        // Does str represent an integer? If so, no need for the division.\r\n        if (i < 0) {\r\n          --e;\r\n        } else {\r\n          x.c = xc;\r\n          x.e = e;\r\n\r\n          // The sign is needed for correct rounding.\r\n          x.s = sign;\r\n          x = div(x, y, dp, rm, baseOut);\r\n          xc = x.c;\r\n          r = x.r;\r\n          e = x.e;\r\n        }\r\n\r\n        // xc now represents str converted to baseOut.\r\n\r\n        // THe index of the rounding digit.\r\n        d = e + dp + 1;\r\n\r\n        // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n        i = xc[d];\r\n\r\n        // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n        k = baseOut / 2;\r\n        r = r || d < 0 || xc[d + 1] != null;\r\n\r\n        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n              : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n               rm == (x.s < 0 ? 8 : 7));\r\n\r\n        // If the index of the rounding digit is not greater than zero, or xc represents\r\n        // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n        // such as 0.00001.\r\n        if (d < 1 || !xc[0]) {\r\n\r\n          // 1^-dp or 0\r\n          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0))\r\n              : alphabet.charAt(0);\r\n        } else {\r\n\r\n          // Truncate xc to the required number of decimal places.\r\n          xc.length = d;\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            // Rounding up may mean the previous digit has to be rounded up and so on.\r\n            for (--baseOut; ++xc[--d] > baseOut;) {\r\n              xc[d] = 0;\r\n\r\n              if (!d) {\r\n                ++e;\r\n                xc = [1].concat(xc);\r\n              }\r\n            }\r\n          }\r\n\r\n          // Determine trailing zeros.\r\n          for (k = xc.length; !xc[--k];);\r\n\r\n          // E.g. [4, 11, 15] becomes 4bf.\r\n          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n          // Add leading zeros, decimal point and trailing zeros as required.\r\n          str = toFixedPoint(str, e, alphabet.charAt(0));\r\n        }\r\n\r\n        // The caller will add the sign.\r\n        return str;\r\n      };\r\n    })();\r\n\r\n\r\n    // Perform division in the specified base. Called by div and convertBase.\r\n    div = (function () {\r\n\r\n      // Assume non-zero x and k.\r\n      function multiply(x, k, base) {\r\n        var m, temp, xlo, xhi,\r\n          carry = 0,\r\n          i = x.length,\r\n          klo = k % SQRT_BASE,\r\n          khi = k / SQRT_BASE | 0;\r\n\r\n        for (x = x.slice(); i--;) {\r\n          xlo = x[i] % SQRT_BASE;\r\n          xhi = x[i] / SQRT_BASE | 0;\r\n          m = khi * xlo + xhi * klo;\r\n          temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n          x[i] = temp % base;\r\n        }\r\n\r\n        if (carry) x = [carry].concat(x);\r\n\r\n        return x;\r\n      }\r\n\r\n      function compare(a, b, aL, bL) {\r\n        var i, cmp;\r\n\r\n        if (aL != bL) {\r\n          cmp = aL > bL ? 1 : -1;\r\n        } else {\r\n\r\n          for (i = cmp = 0; i < aL; i++) {\r\n\r\n            if (a[i] != b[i]) {\r\n              cmp = a[i] > b[i] ? 1 : -1;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        return cmp;\r\n      }\r\n\r\n      function subtract(a, b, aL, base) {\r\n        var i = 0;\r\n\r\n        // Subtract b from a.\r\n        for (; aL--;) {\r\n          a[aL] -= i;\r\n          i = a[aL] < b[aL] ? 1 : 0;\r\n          a[aL] = i * base + a[aL] - b[aL];\r\n        }\r\n\r\n        // Remove leading zeros.\r\n        for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n      }\r\n\r\n      // x: dividend, y: divisor.\r\n      return function (x, y, dp, rm, base) {\r\n        var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n          yL, yz,\r\n          s = x.s == y.s ? 1 : -1,\r\n          xc = x.c,\r\n          yc = y.c;\r\n\r\n        // Either NaN, Infinity or 0?\r\n        if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n          return new BigNumber(\r\n\r\n           // Return NaN if either NaN, or both Infinity or 0.\r\n           !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n            // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n            xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n         );\r\n        }\r\n\r\n        q = new BigNumber(s);\r\n        qc = q.c = [];\r\n        e = x.e - y.e;\r\n        s = dp + e + 1;\r\n\r\n        if (!base) {\r\n          base = BASE;\r\n          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n          s = s / LOG_BASE | 0;\r\n        }\r\n\r\n        // Result exponent may be one less then the current value of e.\r\n        // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n        for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n        if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n        if (s < 0) {\r\n          qc.push(1);\r\n          more = true;\r\n        } else {\r\n          xL = xc.length;\r\n          yL = yc.length;\r\n          i = 0;\r\n          s += 2;\r\n\r\n          // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n          n = mathfloor(base / (yc[0] + 1));\r\n\r\n          // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n          if (n > 1) {\r\n            yc = multiply(yc, n, base);\r\n            xc = multiply(xc, n, base);\r\n            yL = yc.length;\r\n            xL = xc.length;\r\n          }\r\n\r\n          xi = yL;\r\n          rem = xc.slice(0, yL);\r\n          remL = rem.length;\r\n\r\n          // Add zeros to make remainder as long as divisor.\r\n          for (; remL < yL; rem[remL++] = 0);\r\n          yz = yc.slice();\r\n          yz = [0].concat(yz);\r\n          yc0 = yc[0];\r\n          if (yc[1] >= base / 2) yc0++;\r\n          // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n          do {\r\n            n = 0;\r\n\r\n            // Compare divisor and remainder.\r\n            cmp = compare(yc, rem, yL, remL);\r\n\r\n            // If divisor < remainder.\r\n            if (cmp < 0) {\r\n\r\n              // Calculate trial digit, n.\r\n\r\n              rem0 = rem[0];\r\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n              // n is how many times the divisor goes into the current remainder.\r\n              n = mathfloor(rem0 / yc0);\r\n\r\n              //  Algorithm:\r\n              //  product = divisor multiplied by trial digit (n).\r\n              //  Compare product and remainder.\r\n              //  If product is greater than remainder:\r\n              //    Subtract divisor from product, decrement trial digit.\r\n              //  Subtract product from remainder.\r\n              //  If product was less than remainder at the last compare:\r\n              //    Compare new remainder and divisor.\r\n              //    If remainder is greater than divisor:\r\n              //      Subtract divisor from remainder, increment trial digit.\r\n\r\n              if (n > 1) {\r\n\r\n                // n may be > base only when base is 3.\r\n                if (n >= base) n = base - 1;\r\n\r\n                // product = divisor * trial digit.\r\n                prod = multiply(yc, n, base);\r\n                prodL = prod.length;\r\n                remL = rem.length;\r\n\r\n                // Compare product and remainder.\r\n                // If product > remainder then trial digit n too high.\r\n                // n is 1 too high about 5% of the time, and is not known to have\r\n                // ever been more than 1 too high.\r\n                while (compare(prod, rem, prodL, remL) == 1) {\r\n                  n--;\r\n\r\n                  // Subtract divisor from product.\r\n                  subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                  prodL = prod.length;\r\n                  cmp = 1;\r\n                }\r\n              } else {\r\n\r\n                // n is 0 or 1, cmp is -1.\r\n                // If n is 0, there is no need to compare yc and rem again below,\r\n                // so change cmp to 1 to avoid it.\r\n                // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n                if (n == 0) {\r\n\r\n                  // divisor < remainder, so n must be at least 1.\r\n                  cmp = n = 1;\r\n                }\r\n\r\n                // product = divisor\r\n                prod = yc.slice();\r\n                prodL = prod.length;\r\n              }\r\n\r\n              if (prodL < remL) prod = [0].concat(prod);\r\n\r\n              // Subtract product from remainder.\r\n              subtract(rem, prod, remL, base);\r\n              remL = rem.length;\r\n\r\n               // If product was < remainder.\r\n              if (cmp == -1) {\r\n\r\n                // Compare divisor and new remainder.\r\n                // If divisor < new remainder, subtract divisor from remainder.\r\n                // Trial digit n too low.\r\n                // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n                while (compare(yc, rem, yL, remL) < 1) {\r\n                  n++;\r\n\r\n                  // Subtract divisor from remainder.\r\n                  subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                  remL = rem.length;\r\n                }\r\n              }\r\n            } else if (cmp === 0) {\r\n              n++;\r\n              rem = [0];\r\n            } // else cmp === 1 and n will be 0\r\n\r\n            // Add the next digit, n, to the result array.\r\n            qc[i++] = n;\r\n\r\n            // Update the remainder.\r\n            if (rem[0]) {\r\n              rem[remL++] = xc[xi] || 0;\r\n            } else {\r\n              rem = [xc[xi]];\r\n              remL = 1;\r\n            }\r\n          } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n          more = rem[0] != null;\r\n\r\n          // Leading zero?\r\n          if (!qc[0]) qc.splice(0, 1);\r\n        }\r\n\r\n        if (base == BASE) {\r\n\r\n          // To calculate q.e, first get the number of digits of qc[0].\r\n          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n        // Caller is convertBase.\r\n        } else {\r\n          q.e = e;\r\n          q.r = +more;\r\n        }\r\n\r\n        return q;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n     * notation rounded to the specified decimal places or significant digits.\r\n     *\r\n     * n: a BigNumber.\r\n     * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n     * rm: the rounding mode.\r\n     * id: 1 (toExponential) or 2 (toPrecision).\r\n     */\r\n    function format(n, i, rm, id) {\r\n      var c0, e, ne, len, str;\r\n\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      if (!n.c) return n.toString();\r\n\r\n      c0 = n.c[0];\r\n      ne = n.e;\r\n\r\n      if (i == null) {\r\n        str = coeffToString(n.c);\r\n        str = id == 1 || id == 2 && ne <= TO_EXP_NEG\r\n         ? toExponential(str, ne)\r\n         : toFixedPoint(str, ne, '0');\r\n      } else {\r\n        n = round(new BigNumber(n), i, rm);\r\n\r\n        // n.e may have changed if the value was rounded up.\r\n        e = n.e;\r\n\r\n        str = coeffToString(n.c);\r\n        len = str.length;\r\n\r\n        // toPrecision returns exponential notation if the number of significant digits\r\n        // specified is less than the number of digits necessary to represent the integer\r\n        // part of the value in fixed-point notation.\r\n\r\n        // Exponential notation.\r\n        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n          // Append zeros?\r\n          for (; len < i; str += '0', len++);\r\n          str = toExponential(str, e);\r\n\r\n        // Fixed-point notation.\r\n        } else {\r\n          i -= ne;\r\n          str = toFixedPoint(str, e, '0');\r\n\r\n          // Append zeros?\r\n          if (e + 1 > len) {\r\n            if (--i > 0) for (str += '.'; i--; str += '0');\r\n          } else {\r\n            i += e - len;\r\n            if (i > 0) {\r\n              if (e + 1 == len) str += '.';\r\n              for (; i--; str += '0');\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return n.s < 0 && c0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // Handle BigNumber.max and BigNumber.min.\r\n    function maxOrMin(args, method) {\r\n      var m, n,\r\n        i = 0;\r\n\r\n      if (isArray(args[0])) args = args[0];\r\n      m = new BigNumber(args[0]);\r\n\r\n      for (; ++i < args.length;) {\r\n        n = new BigNumber(args[i]);\r\n\r\n        // If any number is NaN, return NaN.\r\n        if (!n.s) {\r\n          m = n;\r\n          break;\r\n        } else if (method.call(m, n)) {\r\n          m = n;\r\n        }\r\n      }\r\n\r\n      return m;\r\n    }\r\n\r\n\r\n    /*\r\n     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n     * Called by minus, plus and times.\r\n     */\r\n    function normalise(n, c, e) {\r\n      var i = 1,\r\n        j = c.length;\r\n\r\n       // Remove trailing zeros.\r\n      for (; !c[--j]; c.pop());\r\n\r\n      // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n      for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n      // Overflow?\r\n      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        n.c = n.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        n.c = [n.e = 0];\r\n      } else {\r\n        n.e = e;\r\n        n.c = c;\r\n      }\r\n\r\n      return n;\r\n    }\r\n\r\n\r\n    // Handle values that fail the validity test in BigNumber.\r\n    parseNumeric = (function () {\r\n      var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n        dotAfter = /^([^.]+)\\.$/,\r\n        dotBefore = /^\\.([^.]+)$/,\r\n        isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n        whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n      return function (x, str, isNum, b) {\r\n        var base,\r\n          s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n        // No exception on ±Infinity or NaN.\r\n        if (isInfinityOrNaN.test(s)) {\r\n          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n          x.c = x.e = null;\r\n        } else {\r\n          if (!isNum) {\r\n\r\n            // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n            s = s.replace(basePrefix, function (m, p1, p2) {\r\n              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n              return !b || b == base ? p1 : m;\r\n            });\r\n\r\n            if (b) {\r\n              base = b;\r\n\r\n              // E.g. '1.' to '1', '.1' to '0.1'\r\n              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n            }\r\n\r\n            if (str != s) return new BigNumber(s, base);\r\n          }\r\n\r\n          // '[BigNumber Error] Not a number: {n}'\r\n          // '[BigNumber Error] Not a base {b} number: {n}'\r\n          if (BigNumber.DEBUG) {\r\n            throw Error\r\n              (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n          }\r\n\r\n          // NaN\r\n          x.c = x.e = x.s = null;\r\n        }\r\n      }\r\n    })();\r\n\r\n\r\n    /*\r\n     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n     * If r is truthy, it is known that there are more digits after the rounding digit.\r\n     */\r\n    function round(x, sd, rm, r) {\r\n      var d, i, j, k, n, ni, rd,\r\n        xc = x.c,\r\n        pows10 = POWS_TEN;\r\n\r\n      // if x is not Infinity or NaN...\r\n      if (xc) {\r\n\r\n        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n        // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n        // ni is the index of n within x.c.\r\n        // d is the number of digits of n.\r\n        // i is the index of rd within n including leading zeros.\r\n        // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n        out: {\r\n\r\n          // Get the number of digits of the first element of xc.\r\n          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n          i = sd - d;\r\n\r\n          // If the rounding digit is in the first element of xc...\r\n          if (i < 0) {\r\n            i += LOG_BASE;\r\n            j = sd;\r\n            n = xc[ni = 0];\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = n / pows10[d - j - 1] % 10 | 0;\r\n          } else {\r\n            ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n            if (ni >= xc.length) {\r\n\r\n              if (r) {\r\n\r\n                // Needed by sqrt.\r\n                for (; xc.length <= ni; xc.push(0));\r\n                n = rd = 0;\r\n                d = 1;\r\n                i %= LOG_BASE;\r\n                j = i - LOG_BASE + 1;\r\n              } else {\r\n                break out;\r\n              }\r\n            } else {\r\n              n = k = xc[ni];\r\n\r\n              // Get the number of digits of n.\r\n              for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n              // Get the index of rd within n.\r\n              i %= LOG_BASE;\r\n\r\n              // Get the index of rd within n, adjusted for leading zeros.\r\n              // The number of leading zeros of n is given by LOG_BASE - d.\r\n              j = i - LOG_BASE + d;\r\n\r\n              // Get the rounding digit at index j of n.\r\n              rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\r\n            }\r\n          }\r\n\r\n          r = r || sd < 0 ||\r\n\r\n          // Are there any non-zero digits after the rounding digit?\r\n          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n           xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n          r = rm < 4\r\n           ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n           : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n            // Check whether the digit to the left of the rounding digit is odd.\r\n            ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n          if (sd < 1 || !xc[0]) {\r\n            xc.length = 0;\r\n\r\n            if (r) {\r\n\r\n              // Convert sd to decimal places.\r\n              sd -= x.e + 1;\r\n\r\n              // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n              x.e = -sd || 0;\r\n            } else {\r\n\r\n              // Zero.\r\n              xc[0] = x.e = 0;\r\n            }\r\n\r\n            return x;\r\n          }\r\n\r\n          // Remove excess digits.\r\n          if (i == 0) {\r\n            xc.length = ni;\r\n            k = 1;\r\n            ni--;\r\n          } else {\r\n            xc.length = ni + 1;\r\n            k = pows10[LOG_BASE - i];\r\n\r\n            // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n            // j > 0 means i > number of leading zeros of n.\r\n            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n          }\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            for (; ;) {\r\n\r\n              // If the digit to be rounded up is in the first element of xc...\r\n              if (ni == 0) {\r\n\r\n                // i will be the length of xc[0] before k is added.\r\n                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n                j = xc[0] += k;\r\n                for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n                // if i != k the length has increased.\r\n                if (i != k) {\r\n                  x.e++;\r\n                  if (xc[0] == BASE) xc[0] = 1;\r\n                }\r\n\r\n                break;\r\n              } else {\r\n                xc[ni] += k;\r\n                if (xc[ni] != BASE) break;\r\n                xc[ni--] = 0;\r\n                k = 1;\r\n              }\r\n            }\r\n          }\r\n\r\n          // Remove trailing zeros.\r\n          for (i = xc.length; xc[--i] === 0; xc.pop());\r\n        }\r\n\r\n        // Overflow? Infinity.\r\n        if (x.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n\r\n        // Underflow? Zero.\r\n        } else if (x.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        }\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n\r\n    // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n     */\r\n    P.absoluteValue = P.abs = function () {\r\n      var x = new BigNumber(this);\r\n      if (x.s < 0) x.s = 1;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return\r\n     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     *   0 if they have the same value,\r\n     *   or null if the value of either is NaN.\r\n     */\r\n    P.comparedTo = function (y, b) {\r\n      return compare(this, new BigNumber(y, b));\r\n    };\r\n\r\n\r\n    /*\r\n     * If dp is undefined or null or true or false, return the number of decimal places of the\r\n     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     *\r\n     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.decimalPlaces = P.dp = function (dp, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), dp + x.e + 1, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n      // Subtract the number of trailing zeros of the last number.\r\n      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n      if (n < 0) n = 0;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n / 0 = I\r\n     *  n / N = N\r\n     *  n / I = 0\r\n     *  0 / n = 0\r\n     *  0 / 0 = N\r\n     *  0 / N = N\r\n     *  0 / I = 0\r\n     *  N / n = N\r\n     *  N / 0 = N\r\n     *  N / N = N\r\n     *  N / I = N\r\n     *  I / n = I\r\n     *  I / 0 = I\r\n     *  I / N = N\r\n     *  I / I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.dividedBy = P.div = function (y, b) {\r\n      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n     * BigNumber by the value of BigNumber(y, b).\r\n     */\r\n    P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n      return div(this, new BigNumber(y, b), 0, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n     *\r\n     * If m is present, return the result modulo m.\r\n     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n     *\r\n     * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n     *\r\n     * n {number|string|BigNumber} The exponent. An integer.\r\n     * [m] {number|string|BigNumber} The modulus.\r\n     *\r\n     * '[BigNumber Error] Exponent not an integer: {n}'\r\n     */\r\n    P.exponentiatedBy = P.pow = function (n, m) {\r\n      var half, isModExp, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n        x = this;\r\n\r\n      n = new BigNumber(n);\r\n\r\n      // Allow NaN and ±Infinity, but not other non-integers.\r\n      if (n.c && !n.isInteger()) {\r\n        throw Error\r\n          (bignumberError + 'Exponent not an integer: ' + n);\r\n      }\r\n\r\n      if (m != null) m = new BigNumber(m);\r\n\r\n      // Exponent of MAX_SAFE_INTEGER is 15.\r\n      nIsBig = n.e > 14;\r\n\r\n      // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\r\n      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n        // The sign of the result of pow when x is negative depends on the evenness of n.\r\n        // If +n overflows to ±Infinity, the evenness of n would be not be known.\r\n        y = new BigNumber(Math.pow(+x.valueOf(), nIsBig ? 2 - isOdd(n) : +n));\r\n        return m ? y.mod(m) : y;\r\n      }\r\n\r\n      nIsNeg = n.s < 0;\r\n\r\n      if (m) {\r\n\r\n        // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n        isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n        if (isModExp) x = x.mod(m);\r\n\r\n      // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n      // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\r\n      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n        // [1, 240000000]\r\n        ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n        // [80000000000000]  [99999750000000]\r\n        : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n        // If x is negative and n is odd, k = -0, else k = 0.\r\n        k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n        // If x >= 1, k = ±Infinity.\r\n        if (x.e > -1) k = 1 / k;\r\n\r\n        // If n is negative return ±0, else return ±Infinity.\r\n        return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n      } else if (POW_PRECISION) {\r\n\r\n        // Truncating each coefficient array to a length of k after each multiplication\r\n        // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n        // i.e. there will be a minimum of 28 guard digits retained.\r\n        k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n      }\r\n\r\n      if (nIsBig) {\r\n        half = new BigNumber(0.5);\r\n        nIsOdd = isOdd(n);\r\n      } else {\r\n        nIsOdd = n % 2;\r\n      }\r\n\r\n      if (nIsNeg) n.s = 1;\r\n\r\n      y = new BigNumber(ONE);\r\n\r\n      // Performs 54 loop iterations for n of 9007199254740991.\r\n      for (; ;) {\r\n\r\n        if (nIsOdd) {\r\n          y = y.times(x);\r\n          if (!y.c) break;\r\n\r\n          if (k) {\r\n            if (y.c.length > k) y.c.length = k;\r\n          } else if (isModExp) {\r\n            y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n          }\r\n        }\r\n\r\n        if (nIsBig) {\r\n          n = n.times(half);\r\n          round(n, n.e + 1, 1);\r\n          if (!n.c[0]) break;\r\n          nIsBig = n.e > 14;\r\n          nIsOdd = isOdd(n);\r\n        } else {\r\n          n = mathfloor(n / 2);\r\n          if (!n) break;\r\n          nIsOdd = n % 2;\r\n        }\r\n\r\n        x = x.times(x);\r\n\r\n        if (k) {\r\n          if (x.c && x.c.length > k) x.c.length = k;\r\n        } else if (isModExp) {\r\n          x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (isModExp) return y;\r\n      if (nIsNeg) y = ONE.div(y);\r\n\r\n      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n     */\r\n    P.integerValue = function (rm) {\r\n      var n = new BigNumber(this);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n      return round(n, n.e + 1, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isEqualTo = P.eq = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n     */\r\n    P.isFinite = function () {\r\n      return !!this.c;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isGreaterThan = P.gt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n     */\r\n    P.isInteger = function () {\r\n      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isLessThan = P.lt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n     */\r\n    P.isNaN = function () {\r\n      return !this.s;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is negative, otherwise return false.\r\n     */\r\n    P.isNegative = function () {\r\n      return this.s < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is positive, otherwise return false.\r\n     */\r\n    P.isPositive = function () {\r\n      return this.s > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n     */\r\n    P.isZero = function () {\r\n      return !!this.c && this.c[0] == 0;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n - 0 = n\r\n     *  n - N = N\r\n     *  n - I = -I\r\n     *  0 - n = -n\r\n     *  0 - 0 = 0\r\n     *  0 - N = N\r\n     *  0 - I = -I\r\n     *  N - n = N\r\n     *  N - 0 = N\r\n     *  N - N = N\r\n     *  N - I = N\r\n     *  I - n = I\r\n     *  I - 0 = I\r\n     *  I - N = N\r\n     *  I - I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.minus = function (y, b) {\r\n      var i, j, t, xLTy,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n      if (a != b) {\r\n        y.s = -b;\r\n        return x.plus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Either Infinity?\r\n        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n        // Either zero?\r\n        if (!xc[0] || !yc[0]) {\r\n\r\n          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n           // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n           ROUNDING_MODE == 3 ? -0 : 0);\r\n        }\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Determine which is the bigger number.\r\n      if (a = xe - ye) {\r\n\r\n        if (xLTy = a < 0) {\r\n          a = -a;\r\n          t = xc;\r\n        } else {\r\n          ye = xe;\r\n          t = yc;\r\n        }\r\n\r\n        t.reverse();\r\n\r\n        // Prepend zeros to equalise exponents.\r\n        for (b = a; b--; t.push(0));\r\n        t.reverse();\r\n      } else {\r\n\r\n        // Exponents equal. Check digit by digit.\r\n        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n        for (a = b = 0; b < j; b++) {\r\n\r\n          if (xc[b] != yc[b]) {\r\n            xLTy = xc[b] < yc[b];\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // x < y? Point xc to the array of the bigger number.\r\n      if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\r\n\r\n      b = (j = yc.length) - (i = xc.length);\r\n\r\n      // Append zeros to xc if shorter.\r\n      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n      if (b > 0) for (; b--; xc[i++] = 0);\r\n      b = BASE - 1;\r\n\r\n      // Subtract yc from xc.\r\n      for (; j > a;) {\r\n\r\n        if (xc[--j] < yc[j]) {\r\n          for (i = j; i && !xc[--i]; xc[i] = b);\r\n          --xc[i];\r\n          xc[j] += BASE;\r\n        }\r\n\r\n        xc[j] -= yc[j];\r\n      }\r\n\r\n      // Remove leading zeros and adjust exponent accordingly.\r\n      for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n      // Zero?\r\n      if (!xc[0]) {\r\n\r\n        // Following IEEE 754 (2008) 6.3,\r\n        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n        y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n        y.c = [y.e = 0];\r\n        return y;\r\n      }\r\n\r\n      // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n      // for finite x and y.\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     *   n % 0 =  N\r\n     *   n % N =  N\r\n     *   n % I =  n\r\n     *   0 % n =  0\r\n     *  -0 % n = -0\r\n     *   0 % 0 =  N\r\n     *   0 % N =  N\r\n     *   0 % I =  0\r\n     *   N % n =  N\r\n     *   N % 0 =  N\r\n     *   N % N =  N\r\n     *   N % I =  N\r\n     *   I % n =  N\r\n     *   I % 0 =  N\r\n     *   I % N =  N\r\n     *   I % I =  N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n     * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n     */\r\n    P.modulo = P.mod = function (y, b) {\r\n      var q, s,\r\n        x = this;\r\n\r\n      y = new BigNumber(y, b);\r\n\r\n      // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n      if (!x.c || !y.s || y.c && !y.c[0]) {\r\n        return new BigNumber(NaN);\r\n\r\n      // Return x if y is Infinity or x is zero.\r\n      } else if (!y.c || x.c && !x.c[0]) {\r\n        return new BigNumber(x);\r\n      }\r\n\r\n      if (MODULO_MODE == 9) {\r\n\r\n        // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n        // r = x - qy    where  0 <= r < abs(y)\r\n        s = y.s;\r\n        y.s = 1;\r\n        q = div(x, y, 0, 3);\r\n        y.s = s;\r\n        q.s *= s;\r\n      } else {\r\n        q = div(x, y, 0, MODULO_MODE);\r\n      }\r\n\r\n      y = x.minus(q.times(y));\r\n\r\n      // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n      return y;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n * 0 = 0\r\n     *  n * N = N\r\n     *  n * I = I\r\n     *  0 * n = 0\r\n     *  0 * 0 = 0\r\n     *  0 * N = N\r\n     *  0 * I = N\r\n     *  N * n = N\r\n     *  N * 0 = N\r\n     *  N * N = N\r\n     *  N * I = N\r\n     *  I * n = I\r\n     *  I * 0 = N\r\n     *  I * N = N\r\n     *  I * I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n     * of BigNumber(y, b).\r\n     */\r\n    P.multipliedBy = P.times = function (y, b) {\r\n      var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n        base, sqrtBase,\r\n        x = this,\r\n        xc = x.c,\r\n        yc = (y = new BigNumber(y, b)).c;\r\n\r\n      // Either NaN, ±Infinity or ±0?\r\n      if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n        // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n          y.c = y.e = y.s = null;\r\n        } else {\r\n          y.s *= x.s;\r\n\r\n          // Return ±Infinity if either is ±Infinity.\r\n          if (!xc || !yc) {\r\n            y.c = y.e = null;\r\n\r\n          // Return ±0 if either is ±0.\r\n          } else {\r\n            y.c = [0];\r\n            y.e = 0;\r\n          }\r\n        }\r\n\r\n        return y;\r\n      }\r\n\r\n      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n      y.s *= x.s;\r\n      xcL = xc.length;\r\n      ycL = yc.length;\r\n\r\n      // Ensure xc points to longer array and xcL to its length.\r\n      if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\r\n\r\n      // Initialise the result array with zeros.\r\n      for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n      base = BASE;\r\n      sqrtBase = SQRT_BASE;\r\n\r\n      for (i = ycL; --i >= 0;) {\r\n        c = 0;\r\n        ylo = yc[i] % sqrtBase;\r\n        yhi = yc[i] / sqrtBase | 0;\r\n\r\n        for (k = xcL, j = i + k; j > i;) {\r\n          xlo = xc[--k] % sqrtBase;\r\n          xhi = xc[k] / sqrtBase | 0;\r\n          m = yhi * xlo + xhi * ylo;\r\n          xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n          zc[j--] = xlo % base;\r\n        }\r\n\r\n        zc[j] = c;\r\n      }\r\n\r\n      if (c) {\r\n        ++e;\r\n      } else {\r\n        zc.splice(0, 1);\r\n      }\r\n\r\n      return normalise(y, zc, e);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n     * i.e. multiplied by -1.\r\n     */\r\n    P.negated = function () {\r\n      var x = new BigNumber(this);\r\n      x.s = -x.s || null;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n + 0 = n\r\n     *  n + N = N\r\n     *  n + I = I\r\n     *  0 + n = n\r\n     *  0 + 0 = 0\r\n     *  0 + N = N\r\n     *  0 + I = I\r\n     *  N + n = N\r\n     *  N + 0 = N\r\n     *  N + N = N\r\n     *  N + I = N\r\n     *  I + n = I\r\n     *  I + 0 = I\r\n     *  I + N = N\r\n     *  I + I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.plus = function (y, b) {\r\n      var t,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n       if (a != b) {\r\n        y.s = -b;\r\n        return x.minus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Return ±Infinity if either ±Infinity.\r\n        if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n        // Either zero?\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n      if (a = xe - ye) {\r\n        if (a > 0) {\r\n          ye = xe;\r\n          t = yc;\r\n        } else {\r\n          a = -a;\r\n          t = xc;\r\n        }\r\n\r\n        t.reverse();\r\n        for (; a--; t.push(0));\r\n        t.reverse();\r\n      }\r\n\r\n      a = xc.length;\r\n      b = yc.length;\r\n\r\n      // Point xc to the longer array, and b to the shorter length.\r\n      if (a - b < 0) t = yc, yc = xc, xc = t, b = a;\r\n\r\n      // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n      for (a = 0; b;) {\r\n        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n      }\r\n\r\n      if (a) {\r\n        xc = [a].concat(xc);\r\n        ++ye;\r\n      }\r\n\r\n      // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n      // ye = MAX_EXP + 1 possible\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     * If sd is undefined or null or true or false, return the number of significant digits of\r\n     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     * If sd is true include integer-part trailing zeros in the count.\r\n     *\r\n     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n     *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.precision = P.sd = function (sd, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (sd != null && sd !== !!sd) {\r\n        intCheck(sd, 1, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), sd, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      v = c.length - 1;\r\n      n = v * LOG_BASE + 1;\r\n\r\n      if (v = c[v]) {\r\n\r\n        // Subtract the number of trailing zeros of the last element.\r\n        for (; v % 10 == 0; v /= 10, n--);\r\n\r\n        // Add the number of digits of the first element.\r\n        for (v = c[0]; v >= 10; v /= 10, n++);\r\n      }\r\n\r\n      if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n     *\r\n     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n     */\r\n    P.shiftedBy = function (k) {\r\n      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n      return this.times('1e' + k);\r\n    };\r\n\r\n\r\n    /*\r\n     *  sqrt(-n) =  N\r\n     *  sqrt(N) =  N\r\n     *  sqrt(-I) =  N\r\n     *  sqrt(I) =  I\r\n     *  sqrt(0) =  0\r\n     *  sqrt(-0) = -0\r\n     *\r\n     * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.squareRoot = P.sqrt = function () {\r\n      var m, n, r, rep, t,\r\n        x = this,\r\n        c = x.c,\r\n        s = x.s,\r\n        e = x.e,\r\n        dp = DECIMAL_PLACES + 4,\r\n        half = new BigNumber('0.5');\r\n\r\n      // Negative/NaN/Infinity/zero?\r\n      if (s !== 1 || !c || !c[0]) {\r\n        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n      }\r\n\r\n      // Initial estimate.\r\n      s = Math.sqrt(+x);\r\n\r\n      // Math.sqrt underflow/overflow?\r\n      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n      if (s == 0 || s == 1 / 0) {\r\n        n = coeffToString(c);\r\n        if ((n.length + e) % 2 == 0) n += '0';\r\n        s = Math.sqrt(n);\r\n        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n        if (s == 1 / 0) {\r\n          n = '1e' + e;\r\n        } else {\r\n          n = s.toExponential();\r\n          n = n.slice(0, n.indexOf('e') + 1) + e;\r\n        }\r\n\r\n        r = new BigNumber(n);\r\n      } else {\r\n        r = new BigNumber(s + '');\r\n      }\r\n\r\n      // Check for zero.\r\n      // r could be zero if MIN_EXP is changed after the this value was created.\r\n      // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n      // coeffToString to throw.\r\n      if (r.c[0]) {\r\n        e = r.e;\r\n        s = e + dp;\r\n        if (s < 3) s = 0;\r\n\r\n        // Newton-Raphson iteration.\r\n        for (; ;) {\r\n          t = r;\r\n          r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n          if (coeffToString(t.c  ).slice(0, s) === (n =\r\n             coeffToString(r.c)).slice(0, s)) {\r\n\r\n            // The exponent of r may here be one less than the final result exponent,\r\n            // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n            // are indexed correctly.\r\n            if (r.e < e) --s;\r\n            n = n.slice(s - 3, s + 1);\r\n\r\n            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n            // iteration.\r\n            if (n == '9999' || !rep && n == '4999') {\r\n\r\n              // On the first iteration only, check to see if rounding up gives the\r\n              // exact result as the nines may infinitely repeat.\r\n              if (!rep) {\r\n                round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n                if (t.times(t).eq(x)) {\r\n                  r = t;\r\n                  break;\r\n                }\r\n              }\r\n\r\n              dp += 4;\r\n              s += 4;\r\n              rep = 1;\r\n            } else {\r\n\r\n              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n              // result. If not, then there are further digits and m will be truthy.\r\n              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n                // Truncate to the first rounding digit.\r\n                round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n                m = !r.times(r).eq(x);\r\n              }\r\n\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in exponential notation and\r\n     * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toExponential = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp++;\r\n      }\r\n      return format(this, dp, rm, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n     * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toFixed = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp = dp + this.e + 1;\r\n      }\r\n      return format(this, dp, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n     * of the FORMAT object (see BigNumber.set).\r\n     *\r\n     * FORMAT = {\r\n     *      decimalSeparator : '.',\r\n     *      groupSeparator : ',',\r\n     *      groupSize : 3,\r\n     *      secondaryGroupSize : 0,\r\n     *      fractionGroupSeparator : '\\xA0',    // non-breaking space\r\n     *      fractionGroupSize : 0\r\n     * };\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toFormat = function (dp, rm) {\r\n      var str = this.toFixed(dp, rm);\r\n\r\n      if (this.c) {\r\n        var i,\r\n          arr = str.split('.'),\r\n          g1 = +FORMAT.groupSize,\r\n          g2 = +FORMAT.secondaryGroupSize,\r\n          groupSeparator = FORMAT.groupSeparator,\r\n          intPart = arr[0],\r\n          fractionPart = arr[1],\r\n          isNeg = this.s < 0,\r\n          intDigits = isNeg ? intPart.slice(1) : intPart,\r\n          len = intDigits.length;\r\n\r\n        if (g2) i = g1, g1 = g2, g2 = i, len -= i;\r\n\r\n        if (g1 > 0 && len > 0) {\r\n          i = len % g1 || g1;\r\n          intPart = intDigits.substr(0, i);\r\n\r\n          for (; i < len; i += g1) {\r\n            intPart += groupSeparator + intDigits.substr(i, g1);\r\n          }\r\n\r\n          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n          if (isNeg) intPart = '-' + intPart;\r\n        }\r\n\r\n        str = fractionPart\r\n         ? intPart + FORMAT.decimalSeparator + ((g2 = +FORMAT.fractionGroupSize)\r\n          ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n           '$&' + FORMAT.fractionGroupSeparator)\r\n          : fractionPart)\r\n         : intPart;\r\n      }\r\n\r\n      return str;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string array representing the value of this BigNumber as a simple fraction with\r\n     * an integer numerator and an integer denominator. The denominator will be a positive\r\n     * non-zero value less than or equal to the specified maximum denominator. If a maximum\r\n     * denominator is not specified, the denominator will be the lowest value necessary to\r\n     * represent the number exactly.\r\n     *\r\n     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n     *\r\n     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n     */\r\n    P.toFraction = function (md) {\r\n      var arr, d, d0, d1, d2, e, exp, n, n0, n1, q, s,\r\n        x = this,\r\n        xc = x.c;\r\n\r\n      if (md != null) {\r\n        n = new BigNumber(md);\r\n\r\n        // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n          throw Error\r\n            (bignumberError + 'Argument ' +\r\n              (n.isInteger() ? 'out of range: ' : 'not an integer: ') + md);\r\n        }\r\n      }\r\n\r\n      if (!xc) return x.toString();\r\n\r\n      d = new BigNumber(ONE);\r\n      n1 = d0 = new BigNumber(ONE);\r\n      d1 = n0 = new BigNumber(ONE);\r\n      s = coeffToString(xc);\r\n\r\n      // Determine initial denominator.\r\n      // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n      e = d.e = s.length - x.e - 1;\r\n      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n      md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n      exp = MAX_EXP;\r\n      MAX_EXP = 1 / 0;\r\n      n = new BigNumber(s);\r\n\r\n      // n0 = d1 = 0\r\n      n0.c[0] = 0;\r\n\r\n      for (; ;)  {\r\n        q = div(n, d, 0, 1);\r\n        d2 = d0.plus(q.times(d1));\r\n        if (d2.comparedTo(md) == 1) break;\r\n        d0 = d1;\r\n        d1 = d2;\r\n        n1 = n0.plus(q.times(d2 = n1));\r\n        n0 = d2;\r\n        d = n.minus(q.times(d2 = d));\r\n        n = d2;\r\n      }\r\n\r\n      d2 = div(md.minus(d0), d1, 0, 1);\r\n      n0 = n0.plus(d2.times(n1));\r\n      d0 = d0.plus(d2.times(d1));\r\n      n0.s = n1.s = x.s;\r\n      e *= 2;\r\n\r\n      // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n      arr = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n         div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1\r\n          ? [n1.toString(), d1.toString()]\r\n          : [n0.toString(), d0.toString()];\r\n\r\n      MAX_EXP = exp;\r\n      return arr;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return the value of this BigNumber converted to a number primitive.\r\n     */\r\n    P.toNumber = function () {\r\n      return +this;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n     * necessary to represent the integer part of the value in fixed-point notation, then use\r\n     * exponential notation.\r\n     *\r\n     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.toPrecision = function (sd, rm) {\r\n      if (sd != null) intCheck(sd, 1, MAX);\r\n      return format(this, sd, rm, 2);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n     * TO_EXP_NEG, return exponential notation.\r\n     *\r\n     * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n     *\r\n     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n     */\r\n    P.toString = function (b) {\r\n      var str,\r\n        n = this,\r\n        s = n.s,\r\n        e = n.e;\r\n\r\n      // Infinity or NaN?\r\n      if (e === null) {\r\n\r\n        if (s) {\r\n          str = 'Infinity';\r\n          if (s < 0) str = '-' + str;\r\n        } else {\r\n          str = 'NaN';\r\n        }\r\n      } else {\r\n        str = coeffToString(n.c);\r\n\r\n        if (b == null) {\r\n          str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n           ? toExponential(str, e)\r\n           : toFixedPoint(str, e, '0');\r\n        } else {\r\n          intCheck(b, 2, ALPHABET.length, 'Base');\r\n          str = convertBase(toFixedPoint(str, e, '0'), 10, b, s, true);\r\n        }\r\n\r\n        if (s < 0 && n.c[0]) str = '-' + str;\r\n      }\r\n\r\n      return str;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return as toString, but do not accept a base argument, and include the minus sign for\r\n     * negative zero.\r\n     */\r\n    P.valueOf = P.toJSON = function () {\r\n      var str,\r\n        n = this,\r\n        e = n.e;\r\n\r\n      if (e === null) return n.toString();\r\n\r\n      str = coeffToString(n.c);\r\n\r\n      str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n        ? toExponential(str, e)\r\n        : toFixedPoint(str, e, '0');\r\n\r\n      return n.s < 0 ? '-' + str : str;\r\n    };\r\n\r\n\r\n    P._isBigNumber = true;\r\n\r\n    if (configObject != null) BigNumber.set(configObject);\r\n\r\n    return BigNumber;\r\n  }\r\n\r\n\r\n  // PRIVATE HELPER FUNCTIONS\r\n\r\n\r\n  function bitFloor(n) {\r\n    var i = n | 0;\r\n    return n > 0 || n === i ? i : i - 1;\r\n  }\r\n\r\n\r\n  // Return a coefficient array as a string of base 10 digits.\r\n  function coeffToString(a) {\r\n    var s, z,\r\n      i = 1,\r\n      j = a.length,\r\n      r = a[0] + '';\r\n\r\n    for (; i < j;) {\r\n      s = a[i++] + '';\r\n      z = LOG_BASE - s.length;\r\n      for (; z--; s = '0' + s);\r\n      r += s;\r\n    }\r\n\r\n    // Determine trailing zeros.\r\n    for (j = r.length; r.charCodeAt(--j) === 48;);\r\n    return r.slice(0, j + 1 || 1);\r\n  }\r\n\r\n\r\n  // Compare the value of BigNumbers x and y.\r\n  function compare(x, y) {\r\n    var a, b,\r\n      xc = x.c,\r\n      yc = y.c,\r\n      i = x.s,\r\n      j = y.s,\r\n      k = x.e,\r\n      l = y.e;\r\n\r\n    // Either NaN?\r\n    if (!i || !j) return null;\r\n\r\n    a = xc && !xc[0];\r\n    b = yc && !yc[0];\r\n\r\n    // Either zero?\r\n    if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n    // Signs differ?\r\n    if (i != j) return i;\r\n\r\n    a = i < 0;\r\n    b = k == l;\r\n\r\n    // Either Infinity?\r\n    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n    // Compare exponents.\r\n    if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n    j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n    // Compare digit by digit.\r\n    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n    // Compare lengths.\r\n    return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n  }\r\n\r\n\r\n  /*\r\n   * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n   */\r\n  function intCheck(n, min, max, name) {\r\n    if (n < min || n > max || n !== (n < 0 ? mathceil(n) : mathfloor(n))) {\r\n      throw Error\r\n       (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n         ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n         : ' not a primitive number: ') + n);\r\n    }\r\n  }\r\n\r\n\r\n  function isArray(obj) {\r\n    return Object.prototype.toString.call(obj) == '[object Array]';\r\n  }\r\n\r\n\r\n  // Assumes finite n.\r\n  function isOdd(n) {\r\n    var k = n.c.length - 1;\r\n    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n  }\r\n\r\n\r\n  function toExponential(str, e) {\r\n    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n     (e < 0 ? 'e' : 'e+') + e;\r\n  }\r\n\r\n\r\n  function toFixedPoint(str, e, z) {\r\n    var len, zs;\r\n\r\n    // Negative exponent?\r\n    if (e < 0) {\r\n\r\n      // Prepend zeros.\r\n      for (zs = z + '.'; ++e; zs += z);\r\n      str = zs + str;\r\n\r\n    // Positive exponent\r\n    } else {\r\n      len = str.length;\r\n\r\n      // Append zeros.\r\n      if (++e > len) {\r\n        for (zs = z, e -= len; --e; zs += z);\r\n        str += zs;\r\n      } else if (e < len) {\r\n        str = str.slice(0, e) + '.' + str.slice(e);\r\n      }\r\n    }\r\n\r\n    return str;\r\n  }\r\n\r\n\r\n  // EXPORT\r\n\r\n\r\n  BigNumber = clone();\r\n  BigNumber['default'] = BigNumber.BigNumber = BigNumber;\r\n\r\n  // AMD.\r\n  if (typeof define == 'function' && define.amd) {\r\n    define(function () { return BigNumber; });\r\n\r\n  // Node.js and other environments that support module.exports.\r\n  } else if (typeof module != 'undefined' && module.exports) {\r\n    module.exports = BigNumber;\r\n\r\n  // Browser.\r\n  } else {\r\n    if (!globalObject) {\r\n      globalObject = typeof self != 'undefined' && self ? self : window;\r\n    }\r\n\r\n    globalObject.BigNumber = BigNumber;\r\n  }\r\n})(this);\r\n"],"sourceRoot":""}